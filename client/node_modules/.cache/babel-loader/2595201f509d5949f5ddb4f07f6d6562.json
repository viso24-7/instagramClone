{"ast":null,"code":"import { post } from 'axios';\nimport { insta_notify, ObjectMssg, wait } from './utils';\nimport { Notify } from '../utils/utilMethods/handy-notification';\nimport { leftGroup, updateGroup } from '../actions/group';\nimport Action from './api/Action';\n/**\r\n * Creates a group\r\n * @param {Object} options\r\n * @param {String} options.name\r\n * @param {String} options.bio\r\n */\n\nexport const createGroup = async options => {\n  let {\n    name,\n    bio,\n    created\n  } = options;\n  let action = new Action('.c_g_update');\n  action.start('Please wait ...');\n  wait();\n  let {\n    data: {\n      message,\n      success,\n      groupId\n    }\n  } = await post('/api/create-group', {\n    name,\n    bio\n  });\n\n  if (success) {\n    Notify({\n      value: message\n    });\n    created(groupId);\n  } else {\n    Notify({\n      value: ObjectMssg(message)\n    });\n  }\n\n  action.end('Create group');\n};\n/**\r\n* Edit group\r\n* @param {Number} options.group_id\r\n* @param {Object} options\r\n* @param {String} options.name\r\n* @param {String} options.bio\r\n* @param {Boolean} options.isPrivate\r\n* @param {Function} options.dispatch\r\n*/\n\nexport const editGroup = async options => {\n  let {\n    group_id,\n    name,\n    bio,\n    isPrivate,\n    dispatch\n  } = options;\n  let group_type = isPrivate ? 'private' : 'public';\n  let action = new Action('.g_e_save_btn', true, 'sec_btn_disabled');\n  action.start('Updating ...');\n  wait();\n  let {\n    data: {\n      success,\n      message\n    }\n  } = await post('/api/edit-group', {\n    name,\n    bio,\n    group_type,\n    group: group_id\n  });\n\n  if (success) {\n    dispatch(updateGroup({\n      name,\n      bio,\n      group_type\n    }));\n  }\n\n  Notify({\n    value: message\n  });\n  action.end('Update');\n};\n/**\r\n * Join group\r\n *\r\n * user, group, when & done properties must be provided\r\n * @param {Object} options Options for joining group\r\n * @param {Number} options.user\r\n * @param {Number} options.added_by\r\n * @param {Number} options.group\r\n * @param {String} options.when\r\n * @param {Function} options.done\r\n */\n\nexport const joinGroup = async options => {\n  let defaults = {\n    user: null,\n    added_by: null,\n    group: null,\n    when: '',\n    done: () => null\n  };\n  let obj = { ...defaults,\n    ...options\n  };\n  let {\n    user,\n    added_by,\n    group,\n    when,\n    done\n  } = obj;\n  let {\n    data: {\n      success,\n      message\n    }\n  } = await post('/api/join-group', {\n    user,\n    added_by,\n    group,\n    when\n  });\n\n  if (success) {\n    if (when === 'add_grp_member') {\n      insta_notify({\n        to: user,\n        type: 'add_grp_member',\n        group_id: group\n      });\n    }\n\n    done();\n  }\n\n  Notify({\n    value: message\n  });\n};\n/**\r\n * Leave group\r\n *\r\n * user, group & done properties must be provided\r\n * @param {Object} options Options for leaving group\r\n * @param {Number} options.user\r\n * @param {Number} options.group\r\n * @param {Boolean} options.updateGroups\r\n * @param {Function} options.dispatch\r\n * @param {Function} options.done\r\n */\n\nexport const leaveGroup = async options => {\n  let defaults = {\n    user: null,\n    group: null,\n    updateGroups: false,\n    dispatch: () => null,\n    done: () => null\n  };\n  let obj = { ...defaults,\n    ...options\n  };\n  let {\n    user,\n    group,\n    updateGroups,\n    dispatch,\n    done\n  } = obj;\n  let {\n    data: {\n      success,\n      message\n    }\n  } = await post('/api/leave-group', {\n    user,\n    group\n  });\n\n  if (success) {\n    if (updateGroups) {\n      dispatch(leftGroup(group));\n    }\n\n    done();\n  }\n\n  Notify({\n    value: message\n  });\n};\n/**\r\n* Change admin of the group\r\n* @param {Object} options\r\n* @param {Number} options.member\r\n* @param {Number} options.group\r\n*/\n\nexport const changeAdmin = async options => {\n  let {\n    member,\n    group\n  } = options;\n  let {\n    data: {\n      success,\n      message\n    }\n  } = await post('/api/change-admin', {\n    user: member,\n    group\n  });\n\n  if (success) {\n    insta_notify({\n      to: member,\n      type: 'change_admin',\n      group_id: group\n    });\n  }\n\n  Notify({\n    value: message,\n    done: () => success ? window.location.reload() : null\n  });\n};\nnotify;","map":{"version":3,"sources":["C:/JavascriptProjects3/instagramClone/client/src/utils/group-utils.js"],"names":["post","insta_notify","ObjectMssg","wait","Notify","leftGroup","updateGroup","Action","createGroup","options","name","bio","created","action","start","data","message","success","groupId","value","end","editGroup","group_id","isPrivate","dispatch","group_type","group","joinGroup","defaults","user","added_by","when","done","obj","to","type","leaveGroup","updateGroups","changeAdmin","member","window","location","reload","notify"],"mappings":"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","sourcesContent":["import {post} from 'axios';\r\nimport {insta_notify,ObjectMssg,wait} from './utils';\r\nimport {Notify} from '../utils/utilMethods/handy-notification';\r\nimport {leftGroup,updateGroup} from '../actions/group';\r\nimport Action from './api/Action';\r\n\r\n/**\r\n * Creates a group\r\n * @param {Object} options\r\n * @param {String} options.name\r\n * @param {String} options.bio\r\n */\r\n export const createGroup = async options => {\r\n     let {name,bio,created} = options;\r\n     let action = new Action('.c_g_update');\r\n\r\n     action.start('Please wait ...');\r\n     wait();\r\n\r\n     let {data: {message,success,groupId}} = await post('/api/create-group', {name,bio});\r\n     if(success){\r\n         Notify({ value: message});\r\n         created(groupId);\r\n     } else {\r\n         Notify({ value: ObjectMssg(message)})\r\n     }\r\n\r\n     action.end('Create group');\r\n  }\r\n\r\n  /**\r\n * Edit group\r\n * @param {Number} options.group_id\r\n * @param {Object} options\r\n * @param {String} options.name\r\n * @param {String} options.bio\r\n * @param {Boolean} options.isPrivate\r\n * @param {Function} options.dispatch\r\n */\r\n export const editGroup = async options => {\r\n     let {group_id,name,bio,isPrivate,dispatch} = options;\r\n     let group_type = isPrivate ? 'private' : 'public';\r\n     let action = new Action('.g_e_save_btn',true,'sec_btn_disabled');\r\n\r\n     action.start('Updating ...');\r\n     wait();\r\n\r\n     let {data: {success,message}} = await post('/api/edit-group', {name,bio,group_type,group:group_id})\r\n     if(success){ \r\n         dispatch(updateGroup({name,bio,group_type}));\r\n     }\r\n     Notify({value: message});\r\n     action.end('Update');\r\n }\r\n\r\n/**\r\n * Join group\r\n *\r\n * user, group, when & done properties must be provided\r\n * @param {Object} options Options for joining group\r\n * @param {Number} options.user\r\n * @param {Number} options.added_by\r\n * @param {Number} options.group\r\n * @param {String} options.when\r\n * @param {Function} options.done\r\n */\r\n export const joinGroup = async options => {\r\n     let defaults = {\r\n          user:null,\r\n          added_by: null,\r\n          group:null,\r\n          when:'',\r\n          done: () => null\r\n         };\r\n     let obj = {\r\n         ...defaults,\r\n         ...options\r\n         };\r\n     let {user,added_by,group,when,done} = obj;\r\n     let {data: {success,message}} = await post('/api/join-group',{user,added_by,group,when});\r\n\r\n     if(success){\r\n         if(when === 'add_grp_member'){\r\n             insta_notify({\r\n                 to: user,\r\n                 type: 'add_grp_member',\r\n                 group_id: group\r\n             })\r\n         }\r\n\r\n         done();\r\n     }\r\n    Notify({ value: message})   \r\n }\r\n\r\n/**\r\n * Leave group\r\n *\r\n * user, group & done properties must be provided\r\n * @param {Object} options Options for leaving group\r\n * @param {Number} options.user\r\n * @param {Number} options.group\r\n * @param {Boolean} options.updateGroups\r\n * @param {Function} options.dispatch\r\n * @param {Function} options.done\r\n */\r\n export const leaveGroup = async options => {\r\n     let defaults = {\r\n         user: null,\r\n         group: null,\r\n         updateGroups: false,\r\n         dispatch: () => null,\r\n         done: () => null\r\n        };\r\n      let obj = {\r\n            ...defaults,\r\n            ...options\r\n            };\r\n      let {user,group,updateGroups,dispatch,done} = obj;\r\n      let {data: {success,message}} = await post('/api/leave-group',{user,group});\r\n   \r\n     if(success){\r\n         if(updateGroups){\r\n            dispatch(leftGroup(group));\r\n         } \r\n         done();\r\n     } \r\n\r\n     Notify({ value: message })\r\n }\r\n\r\n /**\r\n * Change admin of the group\r\n * @param {Object} options\r\n * @param {Number} options.member\r\n * @param {Number} options.group\r\n */\r\n export const changeAdmin = async options => {\r\n     let {member,group} = options;\r\n     let {data: {success,message}} = await post('/api/change-admin',{user:member,group});\r\n\r\n     if(success){\r\n         insta_notify({\r\n             to: member,\r\n             type: 'change_admin',\r\n             group_id: group\r\n         })\r\n     }\r\n\r\n     Notify({\r\n         value: message,\r\n         done: () => (success ? window.location.reload() : null)\r\n     })\r\n }\r\n\r\nnotify\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}