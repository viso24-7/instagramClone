{"ast":null,"code":"import { post } from 'axios';\nimport { notify } from '../utils/utilMethods/handy-notification';\nimport { addGroupPost, addUserPost } from '../actions/post';\nimport { imageCompressor, insta_notify, Me, uData, wait } from './utils';\nimport * as PostActions from '../actions/post';\nimport Action from './api/Action';\nimport d from './api/Dom';\n/**\r\n * Add post\r\n * @param {Object} options Options for creating a new post\r\n * @param {Function} options.dispatch\r\n * @param {String} options.desc\r\n * @param {String} options.targetFile\r\n * @param {String} options.filter\r\n * @param {String} options.location\r\n * @param {String} options.type\r\n * @param {Number} options.group\r\n * @param {String} options.group_name\r\n * @param {Object[]} options.tags\r\n * @param {Number} options.tags.user\r\n * @param {String} options.tags.username\r\n */\n\nexport const addPost = async options => {\n  let {\n    group,\n    group_name,\n    tags,\n    desc,\n    location,\n    type,\n    filter,\n    targetFile,\n    dispatch\n  } = options;\n  let user = Number(uData('session'));\n  let username = uData('username');\n  let form = new FormData();\n  let file = await imageCompressor(targetFile);\n  let action = new Action('.p_post');\n  action.start();\n  wait();\n  form.append('desc', desc);\n  form.append('image', file);\n  form.append('filter', filter);\n  form.append('location', location);\n  form.append('type', type);\n  form.append('group', group);\n  let {\n    data: {\n      success,\n      message,\n      post_id,\n      firstname,\n      surname,\n      filename\n    }\n  } = await post('/api/post-it', form);\n  await post('/api/tag-post', {\n    tags,\n    post_id\n  });\n  tags.forEach(async t => {\n    await insta_notify({\n      to: t.user,\n      type: 'tag',\n      post_id: post_id\n    });\n  });\n\n  if (success) {\n    let newPost = {\n      key: post_id,\n      comments_count: 0,\n      likes_count: 0,\n      shares_count: 0,\n      tags_count: tags.length,\n      user,\n      username,\n      firstname,\n      surname,\n      description: desc,\n      filter,\n      imgSrc: filename,\n      location,\n      post_time: `${new Date().getTime()}`,\n      post_id,\n      group_id: 0,\n      group_name: '',\n      type: 'user'\n    };\n    type == 'user' ? dispatch(addUserPost({ ...newPost,\n      when: 'feed'\n    })) : dispatch(addGroupPost({ ...newPost,\n      group_id: group,\n      group_name,\n      type: 'group',\n      when: 'groupPosts'\n    }));\n  }\n\n  action.end();\n  notify({\n    value: message\n  });\n};\n/**\r\n * Edit post\r\n *\r\n * @param {Object} options\r\n * @param {Number} options.post_id\r\n * @param {String} options.description\r\n * @param {Function} options.dispatch\r\n * @param {Function} options.done\r\n * @param {Function} options.failed\r\n */\n\nexport const editPost = async options => {\n  let {\n    post_id,\n    description,\n    dispatch,\n    done,\n    failed\n  } = options;\n  let {\n    data: {\n      success,\n      message\n    }\n  } = await post('/api/edit-post', {\n    description,\n    post_id\n  });\n\n  if (success) {\n    dispatch(PostActions.editPost({\n      post_id,\n      description\n    }));\n    done();\n  }\n\n  notify({\n    value: message\n  });\n};\n/**\r\n * Deletes a post\r\n * @param {Object} options\r\n * @param {Number} options.post_id\r\n * @param {String} options.when\r\n * @param {Function} options.dispatch\r\n * @param {Function} options.redirect\r\n */\n\nexport const deletePost = async options => {\n  let {\n    post_id,\n    when,\n    dispatch,\n    redirect\n  } = options;\n  wait();\n  let {\n    data: {\n      success,\n      message\n    }\n  } = await post('/api/delete-post', {\n    post: post_id\n  });\n\n  if (success) {\n    dispatch(PostActions.deletePost(post_id));\n    return when == 'viewPost' ? redirect() : null;\n  }\n\n  notify({\n    value: message\n  });\n};\n/**\r\n * Like post\r\n * @param {Object} options\r\n * @param {Number} options.post_id\r\n * @param {Number} options.user\r\n * @param {Function} options.done\r\n */\n\nexport const like = async options => {\n  let {\n    post_id,\n    user,\n    done\n  } = options;\n  let {\n    data: {\n      success,\n      message\n    }\n  } = await post('/api/like-post', {\n    post: post_id\n  });\n\n  if (success) {\n    return !Me(user) ? insta_notify({\n      to: user,\n      type: 'like',\n      post_id\n    }) : null;\n    done();\n  } else {\n    notify({\n      value: message\n    });\n  }\n};\n/**\r\n * Unlikes a post\r\n * @param {Object} options\r\n * @param {Number} options.post_id\r\n * @param {Function} options.done\r\n */\n\nexport const unlike = async options => {\n  let {\n    post_id,\n    done\n  } = options;\n  let {\n    data: {\n      success,\n      message\n    }\n  } = await post('/api/unlike-post', {\n    post_id\n  });\n  success ? done() : notify({\n    value: message\n  });\n};\n/**\r\n* Bookmarks a post\r\n* @param {Object} options\r\n* @param {Number} options.post_id\r\n* @param {Function} options.done\r\n*/\n\nexport const bookmark = async options => {\n  let {\n    post_id,\n    done\n  } = options;\n  let {\n    data: {\n      success,\n      message\n    }\n  } = await post('/api/bookmark-post', {\n    post_id\n  });\n  return success ? done() : null;\n  notify({\n    value: message\n  });\n};\n/**\r\n * Unbookmark post\r\n * @param {Object} options\r\n * @param {Number} options.post_id\r\n * @param {String} options.when\r\n * @param {Number} options.user\r\n * @param {Function} options.dispatch\r\n * @param {Function} options.done\r\n */\n\nexport const unbookmark = async options => {\n  let {\n    user,\n    post_id,\n    when,\n    dispatch,\n    done\n  } = options;\n  let session = uData('session');\n  let {\n    data: {\n      success,\n      message\n    }\n  } = await post('/api/unbookmark-post', {\n    post: post_id,\n    user: session\n  });\n\n  if (success) {\n    if (when == 'bookmarks' && Me(user)) {\n      dispatch(PostActions.unbookmark(post_id));\n      notify({\n        value: 'Post unbookmarked'\n      });\n    }\n\n    done();\n  } else {\n    notify({\n      value: message\n    });\n  }\n};\n/**\r\n *  Share post\r\n * @param {Object} options\r\n * @param {Number} options.user\r\n * @param {Number} options.post_id\r\n * @param {Number} options.postOwner\r\n * @param {Function} options.done\r\n */\n\nexport const share = async options => {\n  let {\n    user,\n    post_id,\n    postOwner,\n    done\n  } = options;\n  new d('.share_btn').blur();\n  let {\n    data: {\n      success,\n      message\n    }\n  } = await post('/api/share-post', {\n    share_to: user,\n    post_id\n  });\n\n  if (success) {\n    insta_notify({\n      to: user,\n      type: 'share',\n      post_id\n    });\n    return !Me(postOwner) ? insta_notify({\n      to: postOwner,\n      type: 'shared_your_post',\n      post_id\n    }) : null;\n    done();\n  }\n\n  notify({\n    value: message\n  });\n};\n/**\r\n * Unshare post\r\n * @param {Object} options\r\n * @param {Number} options.user\r\n * @param {Number} options.post_id\r\n * @param {Function} options.done\r\n */\n\nexport const unshare = async options => {\n  let {\n    user,\n    post_id,\n    done\n  } = options;\n  let {\n    data: {\n      success,\n      message\n    }\n  } = await post('/api/unshare-post', {\n    unshare_to: user,\n    post_id\n  });\n  return success ? done() : null;\n  notify({\n    value: message\n  });\n};","map":{"version":3,"sources":["C:/JavascriptProjects3/instagramClone/client/src/utils/post-utils.js"],"names":["post","notify","addGroupPost","addUserPost","imageCompressor","insta_notify","Me","uData","wait","PostActions","Action","d","addPost","options","group","group_name","tags","desc","location","type","filter","targetFile","dispatch","user","Number","username","form","FormData","file","action","start","append","data","success","message","post_id","firstname","surname","filename","forEach","t","to","newPost","key","comments_count","likes_count","shares_count","tags_count","length","description","imgSrc","post_time","Date","getTime","group_id","when","end","value","editPost","done","failed","deletePost","redirect","like","unlike","bookmark","unbookmark","session","share","postOwner","blur","share_to","unshare","unshare_to"],"mappings":"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","sourcesContent":["import {post} from 'axios';\r\nimport {notify} from '../utils/utilMethods/handy-notification';\r\nimport {addGroupPost,addUserPost} from '../actions/post';\r\nimport {imageCompressor,insta_notify,Me,uData,wait} from './utils';\r\nimport * as PostActions from '../actions/post'\r\nimport Action from './api/Action';\r\nimport d from './api/Dom';\r\n\r\n\r\n/**\r\n * Add post\r\n * @param {Object} options Options for creating a new post\r\n * @param {Function} options.dispatch\r\n * @param {String} options.desc\r\n * @param {String} options.targetFile\r\n * @param {String} options.filter\r\n * @param {String} options.location\r\n * @param {String} options.type\r\n * @param {Number} options.group\r\n * @param {String} options.group_name\r\n * @param {Object[]} options.tags\r\n * @param {Number} options.tags.user\r\n * @param {String} options.tags.username\r\n */\r\n export const addPost = async options => {\r\n     let {group,group_name,tags,desc,location,type,filter,targetFile,dispatch} = options;\r\n     let user = Number(uData('session'));\r\n     let username = uData('username');\r\n     let form = new FormData();\r\n     let file = await imageCompressor(targetFile);\r\n     let action = new Action('.p_post');\r\n\r\n     action.start();\r\n     wait();\r\n\r\n     form.append('desc',desc);\r\n     form.append('image',file);\r\n     form.append('filter',filter);\r\n     form.append('location',location);\r\n     form.append('type',type);\r\n     form.append('group',group);\r\n\r\n     let {data: {success,message,post_id,firstname,surname,filename}} = await post('/api/post-it',form)\r\n          await post('/api/tag-post',{tags,post_id})\r\n     \r\n     tags.forEach(async t => {\r\n         await insta_notify({\r\n             to: t.user,\r\n             type: 'tag',\r\n             post_id: post_id\r\n         })\r\n     })\r\n     \r\n     if(success){\r\n        let newPost = {\r\n            key: post_id,\r\n            comments_count: 0,\r\n            likes_count: 0,\r\n            shares_count: 0,\r\n            tags_count: tags.length,\r\n            user,\r\n            username,\r\n            firstname,\r\n            surname,\r\n            description: desc,\r\n            filter,\r\n            imgSrc: filename,\r\n            location,\r\n            post_time: `${new Date().getTime()}`,\r\n            post_id,\r\n            group_id: 0,\r\n            group_name: '',\r\n            type: 'user'\r\n        };\r\n      \r\n        type == 'user' ? dispatch(addUserPost({\r\n            ...newPost,\r\n            when: 'feed'\r\n        })) : dispatch(addGroupPost({\r\n            ...newPost,\r\n            group_id: group,\r\n            group_name,\r\n            type: 'group',\r\n            when: 'groupPosts'\r\n        }))\r\n     }\r\n\r\n     action.end();\r\n     notify({ value: message})\r\n } \r\n\r\n/**\r\n * Edit post\r\n *\r\n * @param {Object} options\r\n * @param {Number} options.post_id\r\n * @param {String} options.description\r\n * @param {Function} options.dispatch\r\n * @param {Function} options.done\r\n * @param {Function} options.failed\r\n */\r\n export const editPost = async options => {\r\n     let {post_id,description,dispatch,done,failed} = options;\r\n     let {data: {success,message}} = await post('/api/edit-post',{description,post_id});\r\n\r\n     if(success){\r\n         dispatch(PostActions.editPost({\r\n             post_id,\r\n             description\r\n          }));\r\n         done(); \r\n     }\r\n   \r\n   notify({ value: message })  \r\n }\r\n\r\n/**\r\n * Deletes a post\r\n * @param {Object} options\r\n * @param {Number} options.post_id\r\n * @param {String} options.when\r\n * @param {Function} options.dispatch\r\n * @param {Function} options.redirect\r\n */\r\n export const deletePost = async options => {\r\n     let {post_id,when,dispatch,redirect} = options;\r\n\r\n     wait();\r\n     let {data: {success,message}} = await post('/api/delete-post',{post: post_id});\r\n     if(success){\r\n         dispatch(PostActions.deletePost(post_id));\r\n         return when == 'viewPost' ? redirect() : null\r\n     }\r\n\r\n    notify({ value: message})  \r\n }\r\n\r\n/**\r\n * Like post\r\n * @param {Object} options\r\n * @param {Number} options.post_id\r\n * @param {Number} options.user\r\n * @param {Function} options.done\r\n */\r\n export const like = async options => {\r\n     let {post_id,user,done} = options;\r\n     let {data: {success,message}} = await post('/api/like-post',{post: post_id});\r\n\r\n     if(success){\r\n       return !Me(user) ? insta_notify({\r\n             to: user,\r\n             type: 'like',\r\n             post_id\r\n         }) : null\r\n        done(); \r\n     }else {\r\n     notify({value: message})  \r\n   } \r\n } \r\n\r\n/**\r\n * Unlikes a post\r\n * @param {Object} options\r\n * @param {Number} options.post_id\r\n * @param {Function} options.done\r\n */\r\n export const unlike = async options => {\r\n     let {post_id,done} = options;\r\n     let {data:{success,message}} = await post('/api/unlike-post',{post_id});\r\n     success ? done() : notify({ value: message})\r\n }\r\n\r\n /**\r\n * Bookmarks a post\r\n * @param {Object} options\r\n * @param {Number} options.post_id\r\n * @param {Function} options.done\r\n */\r\n export const bookmark = async options => {\r\n     let {post_id,done} = options;\r\n     let {data:{success,message}} = await post('/api/bookmark-post',{post_id});\r\n\r\n     return success ? done() : null\r\n     notify({ value: message})\r\n }\r\n\r\n/**\r\n * Unbookmark post\r\n * @param {Object} options\r\n * @param {Number} options.post_id\r\n * @param {String} options.when\r\n * @param {Number} options.user\r\n * @param {Function} options.dispatch\r\n * @param {Function} options.done\r\n */\r\n export const unbookmark = async options => {\r\n     let {user,post_id,when,dispatch,done} = options;\r\n     let session = uData('session');\r\n     let {data: {success,message}} = await post('/api/unbookmark-post',{post: post_id,user: session});\r\n\r\n     if(success){\r\n         if(when == 'bookmarks' && Me(user)){\r\n             dispatch(PostActions.unbookmark(post_id));\r\n             notify({ value: 'Post unbookmarked'})\r\n         }\r\n         done()\r\n     } else {\r\n    notify({ value: message})    \r\n   }\r\n }\r\n\r\n/**\r\n *  Share post\r\n * @param {Object} options\r\n * @param {Number} options.user\r\n * @param {Number} options.post_id\r\n * @param {Number} options.postOwner\r\n * @param {Function} options.done\r\n */\r\n export const share = async options => {\r\n     let {user,post_id,postOwner,done} = options;\r\n     new d('.share_btn').blur();\r\n     let {data: {success,message}} = await post('/api/share-post',{share_to: user,post_id});\r\n\r\n     if(success){\r\n         insta_notify({\r\n             to: user,\r\n             type: 'share',\r\n             post_id\r\n         })\r\n\r\n         return !Me(postOwner) ? insta_notify({\r\n             to: postOwner,\r\n             type: 'shared_your_post',\r\n             post_id\r\n         }) : null\r\n         \r\n         done();\r\n     }\r\n  \r\n     notify({value: message})\r\n }\r\n\r\n/**\r\n * Unshare post\r\n * @param {Object} options\r\n * @param {Number} options.user\r\n * @param {Number} options.post_id\r\n * @param {Function} options.done\r\n */\r\n export const unshare = async options => {\r\n     let {user,post_id,done} = options;\r\n     let {data: {success,message}} = await post('/api/unshare-post',{unshare_to: user,post_id});\r\n\r\n     return success ? done() : null\r\n     notify({value: message})\r\n }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}