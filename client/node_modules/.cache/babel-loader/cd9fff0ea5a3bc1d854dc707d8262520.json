{"ast":null,"code":"import { post } from 'axios';\nimport { notify } from '../utils/utilMethods/handy-notification';\nimport { conversationAdded, messaged, changeLastMssg, unsendAllMessages, deleteCon, deleteMssg } from '../actions/message';\nimport { insta_notify, imageCompressor, uData, wait } from './utils';\nimport d from './api/Dom';\nimport Action from './api/Action';\n/**\r\n * Scrolls down to bottom of the conversation\r\n */\n\nexport const messageScroll = () => {\n  new d('.mssg_end').scrollTop();\n};\n/**\r\n * Creates a new conversation\r\n * @param {Object} options\r\n * @param {Number} options.user\r\n * @param {String} options.username\r\n * @param {Function} options.dispatch\r\n * @param {Boolean} options.updateConversations\r\n * @param {Function} options.done\r\n */\n\nexport const newConversation = async options => {\n  let {\n    user,\n    username,\n    updateConversations,\n    dispatch,\n    done\n  } = options;\n  let {\n    data: {\n      success,\n      message,\n      con_id\n    }\n  } = await post('/api/create-new-conversation', {\n    user\n  });\n  wait();\n\n  if (success) {\n    done();\n\n    if (updateConversations) {\n      dispatch(conversationAdded({\n        key: con_id,\n        con_id,\n        con_with: user,\n        con_with_username: username,\n        lastMssg: {\n          lastMessage: '',\n          lastMessageBy: null,\n          lastMessageTime: null,\n          lastMessageType: ''\n        },\n        unreadMssgs: 0\n      }));\n    }\n\n    insta_notify({\n      to: user,\n      type: 'new_con'\n    });\n  }\n\n  notify({\n    value: message\n  });\n};\n/**\r\n * A helper for dispatching actions related to messages\r\n * @param {Object} options\r\n */\n\nconst messageDispatchHelper = async options => {\n  let {\n    con_id,\n    con_with,\n    message_id,\n    message,\n    messageType,\n    dispatch\n  } = options;\n  let session = uData('session');\n  dispatch(messaged({\n    con_id,\n    message,\n    message_id,\n    message_time: `${new Date().getTime()}`,\n    message_by: Number(session),\n    message_to: con_with,\n    type: messageType,\n    status: 'read'\n  }));\n  dispatch(changeLastMssg({\n    con_id,\n    lastMssg: {\n      lastMessage: message,\n      lastMessageBy: session,\n      lastMessageTime: `${new Date().getTime()}`,\n      lastMessageType: messageType\n    }\n  }));\n};\n/**\r\n * Test message\r\n * @param {Object} options\r\n * @param {String} options.message\r\n * @param {Number} options.con_id\r\n * @param {Number} options.con_with\r\n * @param {Function} options.dispatch\r\n */\n\n\nexport const textMessage = async options => {\n  let {\n    message,\n    con_id,\n    con_with,\n    dispatch\n  } = options;\n  let action = new Action('.mssg_send');\n  action.start();\n\n  if (!message) {\n    notify({\n      value: 'Comment field is empty'\n    });\n  } else {\n    let {\n      data: {\n        success,\n        message,\n        message_id\n      }\n    } = await post('/api/text-message', {\n      message,\n      con_id,\n      con_with\n    });\n\n    if (success) {\n      messageDispatchHelper({\n        con_id,\n        con_with,\n        message_id,\n        message,\n        messageType: 'text',\n        dispatch\n      });\n    } else {\n      notify({\n        value: message\n      });\n    }\n  }\n\n  messageScroll();\n  action.end('Send');\n};\n/**\r\n* Image message\r\n* @param {Object} options\r\n* @param {File}   options.file\r\n* @param {Number} options.con_id\r\n* @param {Number} options.con_with\r\n* @param {Function} options.dispatch\r\n*/\n\nexport const imageMessage = async options => {\n  let {\n    file: messageFile,\n    con_id,\n    con_with,\n    dispatch\n  } = options;\n  let form = new FormData();\n  let file = await imageCompressor(messageFile);\n  let d = new d('.overlay-2');\n  d.show();\n  wait();\n  form.append('messageFile', file);\n  form.append('con_id', con_id);\n  form.append('con_with', con_with);\n  let {\n    data: {\n      success,\n      message,\n      message_id,\n      filename\n    }\n  } = await post('/api/image-message', form);\n\n  if (success) {\n    messageDispatchHelper({\n      con_id,\n      con_with,\n      message_id,\n      message: filename,\n      messageType: 'image',\n      dispatch\n    });\n  }\n\n  messageScroll();\n  d.hide();\n  notify({\n    value: message\n  });\n};\n/**\r\n * Sticker message\r\n * @param {Object} options\r\n * @param {Number} options.con_id\r\n * @param {Number} options.con_with\r\n * @param {String} options.sticker\r\n * @param {Function} options.dispatch\r\n */\n\nexport const stickerMessage = async options => {\n  let {\n    con_id,\n    con_with,\n    sticker,\n    dispatch\n  } = options;\n  let {\n    data: {\n      success,\n      message,\n      filename,\n      message_id\n    }\n  } = await post('/api/sticker-message', {\n    con_id,\n    con_with,\n    sticker\n  });\n  wait();\n\n  if (success) {\n    messageDispatchHelper({\n      con_id,\n      con_with,\n      message_id,\n      message: filename,\n      messageType: 'sticker',\n      dispatch\n    });\n  }\n\n  notify({\n    value: message\n  });\n  messageScroll();\n};\n/** Unsend all messages\r\n * @param {Object} options\r\n * @param {Number} options.con_id\r\n * @param {Function} options.dispatch\r\n */\n\nexport const deleteYourMessages = async options => {\n  let {\n    con_id,\n    dispatch\n  } = options;\n  let session = uData('session');\n  wait();\n  let {\n    data: {\n      success,\n      message\n    }\n  } = await post('/api/unsend-all-mssgs', {\n    con_id\n  });\n  notify({\n    value: message\n  });\n  return success ? dispatch(unsendAllMessages(session)) : null;\n};\n/**\r\n * Deletes a conversation\r\n * @param {Object} options\r\n * @param {Number} options.con_id\r\n * @param {Function} options.dispatch\r\n * @param {Function} options.hideConversation\r\n */\n\nexport const deleteConversation = async options => {\n  let {\n    con_id,\n    hideConversation,\n    dispatch\n  } = options;\n  let {\n    data: {\n      success,\n      message\n    }\n  } = await post('/api/delete-conversation', {\n    con_id\n  });\n  wait();\n\n  if (success) {\n    dispatch(deleteCon(con_id));\n    hideConversation();\n  }\n\n  notify({\n    value: message\n  });\n};\n/**\r\n *\r\n * @param {Object} options\r\n * @param {Number} options.message_id\r\n * @param {String} options.message\r\n * @param {String} options.type\r\n * @param {Function} options.dispatch\r\n * @param {Function} options.done\r\n */\n\nexport const deleteMessage = async options => {\n  let {\n    message,\n    message_id,\n    type,\n    dispatch,\n    done\n  } = options;\n  let {\n    data\n  } = await post('/api/delete-message', {\n    message_id,\n    message,\n    type\n  });\n\n  if (data.success) {\n    dispatch(deleteMssg(message_id));\n    done();\n  }\n\n  notify({\n    value: data.message\n  });\n};","map":{"version":3,"sources":["C:/JavascriptProjects3/instagramClone/client/src/utils/message-utils.js"],"names":["post","notify","conversationAdded","messaged","changeLastMssg","unsendAllMessages","deleteCon","deleteMssg","insta_notify","imageCompressor","uData","wait","d","Action","messageScroll","scrollTop","newConversation","options","user","username","updateConversations","dispatch","done","data","success","message","con_id","key","con_with","con_with_username","lastMssg","lastMessage","lastMessageBy","lastMessageTime","lastMessageType","unreadMssgs","to","type","value","messageDispatchHelper","message_id","messageType","session","message_time","Date","getTime","message_by","Number","message_to","status","textMessage","action","start","end","imageMessage","file","messageFile","form","FormData","show","append","filename","hide","stickerMessage","sticker","deleteYourMessages","deleteConversation","hideConversation","deleteMessage"],"mappings":"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","sourcesContent":["import {post} from 'axios';\r\nimport {notify} from '../utils/utilMethods/handy-notification';\r\nimport {conversationAdded,messaged,changeLastMssg,unsendAllMessages,deleteCon,deleteMssg} from '../actions/message';\r\nimport {insta_notify,imageCompressor,uData,wait} from './utils';\r\nimport d from './api/Dom';\r\nimport Action from './api/Action';\r\n\r\n/**\r\n * Scrolls down to bottom of the conversation\r\n */\r\n export const messageScroll = () => {\r\n     new d('.mssg_end').scrollTop()\r\n }\r\n\r\n/**\r\n * Creates a new conversation\r\n * @param {Object} options\r\n * @param {Number} options.user\r\n * @param {String} options.username\r\n * @param {Function} options.dispatch\r\n * @param {Boolean} options.updateConversations\r\n * @param {Function} options.done\r\n */\r\n export const newConversation = async options => {\r\n     let {user,username,updateConversations,dispatch,done} = options;\r\n     let {data: {success,message,con_id}} = await post('/api/create-new-conversation',{user});\r\n     wait();\r\n\r\n     if(success){\r\n         done();\r\n         if(updateConversations){\r\n             dispatch(conversationAdded({\r\n                 key: con_id,\r\n                 con_id,\r\n                 con_with: user,\r\n                 con_with_username: username,\r\n                 lastMssg: {\r\n                     lastMessage: '',\r\n                     lastMessageBy: null,\r\n                     lastMessageTime: null,\r\n                     lastMessageType: ''\r\n                 },\r\n                 unreadMssgs: 0\r\n             }))\r\n         }\r\n\r\n         insta_notify({\r\n             to: user,\r\n             type: 'new_con'\r\n         })\r\n     }\r\n\r\n     notify({ value: message})\r\n }\r\n\r\n/**\r\n * A helper for dispatching actions related to messages\r\n * @param {Object} options\r\n */\r\n const messageDispatchHelper = async options => {\r\n     let {con_id,con_with,message_id,message,messageType,dispatch} = options;\r\n     let session = uData('session');\r\n\r\n     dispatch(messaged({\r\n         con_id,\r\n         message,\r\n         message_id,\r\n         message_time: `${new Date().getTime()}`,\r\n         message_by: Number(session),\r\n         message_to: con_with,\r\n         type: messageType,\r\n         status: 'read'\r\n     }));\r\n\r\n     dispatch(changeLastMssg({\r\n         con_id,\r\n         lastMssg: {\r\n             lastMessage: message,\r\n             lastMessageBy: session,\r\n             lastMessageTime: `${new Date().getTime()}`,\r\n             lastMessageType: messageType\r\n         }\r\n     }));\r\n }\r\n\r\n/**\r\n * Test message\r\n * @param {Object} options\r\n * @param {String} options.message\r\n * @param {Number} options.con_id\r\n * @param {Number} options.con_with\r\n * @param {Function} options.dispatch\r\n */\r\n export const textMessage = async options => {\r\n     let {message,con_id,con_with,dispatch} = options;\r\n     let action = new Action('.mssg_send');\r\n\r\n     action.start();\r\n     if(!message){\r\n         notify({value: 'Comment field is empty'})\r\n     } else {\r\n         let {data: {success,message,message_id}} = await post('/api/text-message',{message,con_id,con_with});\r\n         if(success){\r\n             messageDispatchHelper({\r\n                 con_id,\r\n                 con_with,\r\n                 message_id,\r\n                 message,\r\n                 messageType: 'text',\r\n                 dispatch\r\n             })\r\n         } else{\r\n             notify({ value: message})\r\n         } \r\n     }\r\n\r\n     messageScroll();\r\n     action.end('Send');\r\n }\r\n\r\n /**\r\n * Image message\r\n * @param {Object} options\r\n * @param {File}   options.file\r\n * @param {Number} options.con_id\r\n * @param {Number} options.con_with\r\n * @param {Function} options.dispatch\r\n */\r\n export const imageMessage = async options => {\r\n     let {file: messageFile,con_id,con_with,dispatch} = options;\r\n     let form = new FormData();\r\n     let file = await imageCompressor(messageFile);\r\n     let d = new d('.overlay-2');\r\n\r\n     d.show();\r\n     wait();\r\n\r\n     form.append('messageFile',file);\r\n     form.append('con_id',con_id);\r\n     form.append('con_with', con_with);\r\n\r\n     let {data:{success,message,message_id,filename}} = await post('/api/image-message',form);\r\n     if(success){\r\n         messageDispatchHelper({\r\n             con_id,\r\n             con_with,\r\n             message_id,\r\n             message: filename,\r\n             messageType: 'image',\r\n             dispatch\r\n         })\r\n     }\r\n\r\n     messageScroll();\r\n     d.hide();\r\n     notify({ value: message});\r\n }\r\n\r\n/**\r\n * Sticker message\r\n * @param {Object} options\r\n * @param {Number} options.con_id\r\n * @param {Number} options.con_with\r\n * @param {String} options.sticker\r\n * @param {Function} options.dispatch\r\n */\r\n export const stickerMessage = async options => {\r\n     let {con_id,con_with,sticker,dispatch} = options;\r\n     let {data: {success,message,filename,message_id}} = await post('/api/sticker-message', {con_id,con_with,sticker});\r\n\r\n     wait();\r\n     if(success){\r\n         messageDispatchHelper({\r\n             con_id,\r\n             con_with,\r\n             message_id,\r\n             message: filename,\r\n             messageType: 'sticker',\r\n             dispatch\r\n         })\r\n     }\r\n\r\n    notify({ value: message});\r\n    messageScroll(); \r\n }\r\n\r\n/** Unsend all messages\r\n * @param {Object} options\r\n * @param {Number} options.con_id\r\n * @param {Function} options.dispatch\r\n */\r\n export const deleteYourMessages = async options => {\r\n     let {con_id,dispatch} = options;\r\n     let session = uData('session');\r\n\r\n     wait();\r\n     let {data: {success,message}} = await post('/api/unsend-all-mssgs',{con_id});\r\n     notify({ value: message})\r\n     return success ? dispatch(unsendAllMessages(session)) : null;\r\n }\r\n\r\n/**\r\n * Deletes a conversation\r\n * @param {Object} options\r\n * @param {Number} options.con_id\r\n * @param {Function} options.dispatch\r\n * @param {Function} options.hideConversation\r\n */\r\n export const deleteConversation = async options => {\r\n     let {con_id,hideConversation,dispatch} = options;\r\n     let {data: {success,message}} = await post('/api/delete-conversation',{con_id});\r\n\r\n     wait();\r\n     if(success){\r\n         dispatch(deleteCon(con_id));\r\n         hideConversation();\r\n     }\r\n\r\n     notify({value: message})\r\n }\r\n\r\n/**\r\n *\r\n * @param {Object} options\r\n * @param {Number} options.message_id\r\n * @param {String} options.message\r\n * @param {String} options.type\r\n * @param {Function} options.dispatch\r\n * @param {Function} options.done\r\n */\r\n export const deleteMessage = async options => {\r\n     let {message,message_id,type,dispatch,done} = options;\r\n     let {data} = await post('/api/delete-message',{message_id,message,type});\r\n     \r\n     if(data.success){\r\n         dispatch(deleteMssg(message_id));\r\n         done();\r\n     }\r\n\r\n     notify({ value: data.message})\r\n }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}