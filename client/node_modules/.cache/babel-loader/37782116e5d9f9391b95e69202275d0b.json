{"ast":null,"code":"import { post } from 'axios';\nimport { Notify } from '../utils/utilMethods/handy-notification';\nimport * as followA from '../actions/follow';\nimport { insta_notify, uData } from './utils';\n/**\r\n * Follow user\r\n *\r\n * user, username & done properties must be provided.\r\n *\r\n * Provide update_followers when user's followers data need to be updated.\r\n * Eg. On Banner Comp.\r\n *\r\n * Provide update_followings when user's followings data need to be updated.\r\n * Eg. On Followers Comp.\r\n *\r\n * Provide dispatch when either update_followers OR update_followings needs to be updated\r\n *\r\n * Provide Firstname & Surname when update_followings=true\r\n *\r\n * Provide username as it used for notifying.\r\n *\r\n * @param {Object} options Options for following user\r\n * @param {Number} options.user\r\n * @param {String} options.username\r\n * @param {firstname} options.firstname\r\n * @param {surname} options.surname\r\n * @param {Boolean} options.update_followers\r\n * @param {Boolean} options.update_followings\r\n * @param {Function} options.dispatch\r\n * @param {Function} options.done\r\n */\n\nexport const follow = async options => {\n  let defaults = {\n    user: null,\n    username: null,\n    firstname: null,\n    surname: null,\n    update_followers: false,\n    update_followings: false,\n    dispatch: () => null,\n    done: () => null\n  };\n  let obj = { ...defaults,\n    ...options\n  };\n  let {\n    user,\n    username,\n    firstname,\n    surname,\n    update_followers,\n    update_followings,\n    dispatch,\n    done\n  } = obj;\n  let {\n    data: {\n      success,\n      message,\n      ff\n    }\n  } = await post('/api/follow', {\n    user,\n    username\n  });\n\n  if (success) {\n    let following = {\n      follow_id: ff.follow_id,\n      follow_to: user,\n      follow_by: Number(uData('session')),\n      username,\n      firstname,\n      surname,\n      isFollowing: true,\n      follow_time: ff.follow_time\n    };\n\n    if (update_followers) {\n      dispatch(followA.Follower(ff));\n    }\n\n    if (update_followings) {\n      dispatch(followA.Following(following));\n    }\n\n    insta_notify({\n      to: user,\n      type: 'follow'\n    });\n    done();\n  }\n\n  Notify({\n    value: message\n  });\n};\n/**\r\n * Unfollow user\r\n *\r\n * user & done properties must be provided.\r\n *\r\n * Provide update_followers when user's followers data need to be updated.\r\n * Eg. On Banner Comp.\r\n *\r\n * Provide update_followings when user's followings data need to be updated.\r\n * Eg. On Followers Comp.\r\n *\r\n * Provide dispatch when either update_followers OR update_followings needs to be updated\r\n *\r\n * @param {Object} options Options for unfollowing user\r\n * @param {Number} options.user\r\n * @param {Boolean} options.update_followers\r\n * @param {Boolean} options.update_followings\r\n * @param {Function} options.dispatch\r\n * @param {Function} options.done\r\n */\n\nexport const unfollow = async options => {\n  let defaults = {\n    user: null,\n    update_followers: false,\n    update_followings: false,\n    dispatch: () => null,\n    done: () => null\n  };\n  let obj = { ...defaults,\n    ...options\n  };\n  let {\n    user,\n    update_followers,\n    update_followings,\n    dispatch,\n    done\n  } = obj;\n  let session = uData('session');\n  let {\n    data: {\n      success,\n      message\n    }\n  } = await post('/api/unfollow', {\n    user\n  });\n\n  if (success) {\n    if (update_followers) {\n      dispatch(followA.Unfollower(session));\n    }\n\n    if (update_followings) {\n      dispatch(followA.Unfollowing(user));\n    }\n\n    done();\n  }\n\n  Notify({\n    value: message\n  });\n};\n/**\r\n * Add user to favorites\r\n * @param {Number} user User to add to favorites\r\n */\n\nexport const addToFavourites = async user => {\n  let {\n    data: {\n      success,\n      message\n    }\n  } = await post('/api/add-to-favourites', {\n    user\n  });\n\n  if (success) {\n    insta_notify({\n      to: user,\n      type: 'Favourites'\n    });\n  }\n\n  Notify({\n    value: message\n  });\n};\n/**\r\n * Recommends a user\r\n * @param {Object} options\r\n * @param {Number} options.recommend_to\r\n * @param {Number} options.user\r\n */\n\nexport const recommendUser = async options => {\n  let {\n    user,\n    recommend_to\n  } = options;\n  let {\n    data: {\n      success,\n      message\n    }\n  } = await post('/api/recommend-user', {\n    user,\n    recommend_to\n  });\n\n  if (success) {\n    insta_notify({\n      to: recommend_to,\n      type: 'recommend',\n      user\n    });\n  }\n\n  Notify({\n    value: message\n  });\n};","map":{"version":3,"sources":["C:/JavascriptProjects3/instagramClone/client/src/utils/user-interact-utils.js"],"names":["post","Notify","followA","insta_notify","uData","follow","options","defaults","user","username","firstname","surname","update_followers","update_followings","dispatch","done","obj","data","success","message","ff","following","follow_id","follow_to","follow_by","Number","isFollowing","follow_time","Follower","Following","to","type","value","unfollow","session","Unfollower","Unfollowing","addToFavourites","recommendUser","recommend_to"],"mappings":"AAAA,SAAQA,IAAR,QAAmB,OAAnB;AACA,SAAQC,MAAR,QAAqB,yCAArB;AACA,OAAO,KAAKC,OAAZ,MAAyB,mBAAzB;AACA,SAAQC,YAAR,EAAqBC,KAArB,QAAiC,SAAjC;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BC,OAAO,MAAMC,MAAM,GAAG,MAAMC,OAAN,IAAiB;AACnC,MAAIC,QAAQ,GAAG;AACVC,IAAAA,IAAI,EAAE,IADI;AAEVC,IAAAA,QAAQ,EAAE,IAFA;AAGVC,IAAAA,SAAS,EAAE,IAHD;AAIVC,IAAAA,OAAO,EAAE,IAJC;AAKVC,IAAAA,gBAAgB,EAAE,KALR;AAMVC,IAAAA,iBAAiB,EAAE,KANT;AAOVC,IAAAA,QAAQ,EAAE,MAAM,IAPN;AAQVC,IAAAA,IAAI,EAAE,MAAM;AARF,GAAf;AAUC,MAAIC,GAAG,GAAG,EAAC,GAAGT,QAAJ;AAAa,OAAGD;AAAhB,GAAV;AACA,MAAI;AAACE,IAAAA,IAAD;AAAMC,IAAAA,QAAN;AAAeC,IAAAA,SAAf;AAAyBC,IAAAA,OAAzB;AAAiCC,IAAAA,gBAAjC;AAAkDC,IAAAA,iBAAlD;AAAoEC,IAAAA,QAApE;AAA6EC,IAAAA;AAA7E,MAAqFC,GAAzF;AACA,MAAI;AAACC,IAAAA,IAAI,EAAE;AAACC,MAAAA,OAAD;AAASC,MAAAA,OAAT;AAAiBC,MAAAA;AAAjB;AAAP,MAA+B,MAAMpB,IAAI,CAAC,aAAD,EAAe;AAACQ,IAAAA,IAAD;AAAMC,IAAAA;AAAN,GAAf,CAA7C;;AAEA,MAAGS,OAAH,EAAW;AACP,QAAIG,SAAS,GAAG;AACZC,MAAAA,SAAS,EAAEF,EAAE,CAACE,SADF;AAEZC,MAAAA,SAAS,EAAEf,IAFC;AAGZgB,MAAAA,SAAS,EAAEC,MAAM,CAACrB,KAAK,CAAC,SAAD,CAAN,CAHL;AAIZK,MAAAA,QAJY;AAKZC,MAAAA,SALY;AAMZC,MAAAA,OANY;AAOZe,MAAAA,WAAW,EAAE,IAPD;AAQZC,MAAAA,WAAW,EAAEP,EAAE,CAACO;AARJ,KAAhB;;AAWD,QAAGf,gBAAH,EAAoB;AAChBE,MAAAA,QAAQ,CAACZ,OAAO,CAAC0B,QAAR,CAAiBR,EAAjB,CAAD,CAAR;AACH;;AACD,QAAGP,iBAAH,EAAqB;AAClBC,MAAAA,QAAQ,CAACZ,OAAO,CAAC2B,SAAR,CAAkBR,SAAlB,CAAD,CAAR;AACF;;AAEDlB,IAAAA,YAAY,CAAC;AACT2B,MAAAA,EAAE,EAAEtB,IADK;AAETuB,MAAAA,IAAI,EAAE;AAFG,KAAD,CAAZ;AAIDhB,IAAAA,IAAI;AACL;;AAEJd,EAAAA,MAAM,CAAC;AAAE+B,IAAAA,KAAK,EAAEb;AAAT,GAAD,CAAN;AACD,CA1CM;AA4CR;;;;;;;;;;;;;;;;;;;;;AAoBE,OAAO,MAAMc,QAAQ,GAAG,MAAM3B,OAAN,IAAiB;AACrC,MAAIC,QAAQ,GAAG;AACXC,IAAAA,IAAI,EAAE,IADK;AAEXI,IAAAA,gBAAgB,EAAE,KAFP;AAGXC,IAAAA,iBAAiB,EAAE,KAHR;AAIXC,IAAAA,QAAQ,EAAE,MAAM,IAJL;AAKXC,IAAAA,IAAI,EAAE,MAAM;AALD,GAAf;AAOC,MAAIC,GAAG,GAAG,EAAC,GAAGT,QAAJ;AAAa,OAAGD;AAAhB,GAAV;AACA,MAAI;AAACE,IAAAA,IAAD;AAAMI,IAAAA,gBAAN;AAAuBC,IAAAA,iBAAvB;AAAyCC,IAAAA,QAAzC;AAAkDC,IAAAA;AAAlD,MAA0DC,GAA9D;AACA,MAAIkB,OAAO,GAAG9B,KAAK,CAAC,SAAD,CAAnB;AACA,MAAI;AAACa,IAAAA,IAAI,EAAE;AAACC,MAAAA,OAAD;AAASC,MAAAA;AAAT;AAAP,MAA4B,MAAMnB,IAAI,CAAC,eAAD,EAAiB;AAACQ,IAAAA;AAAD,GAAjB,CAA1C;;AAEA,MAAGU,OAAH,EAAW;AACP,QAAGN,gBAAH,EAAoB;AAChBE,MAAAA,QAAQ,CAACZ,OAAO,CAACiC,UAAR,CAAmBD,OAAnB,CAAD,CAAR;AACH;;AAED,QAAGrB,iBAAH,EAAqB;AAClBC,MAAAA,QAAQ,CAACZ,OAAO,CAACkC,WAAR,CAAoB5B,IAApB,CAAD,CAAR;AACF;;AACDO,IAAAA,IAAI;AACP;;AAEDd,EAAAA,MAAM,CAAC;AAAE+B,IAAAA,KAAK,EAAEb;AAAT,GAAD,CAAN;AACJ,CAzBM;AA2BT;;;;;AAIC,OAAO,MAAMkB,eAAe,GAAG,MAAM7B,IAAN,IAAc;AAC3C,MAAI;AAACS,IAAAA,IAAI,EAAE;AAACC,MAAAA,OAAD;AAASC,MAAAA;AAAT;AAAP,MAA4B,MAAMnB,IAAI,CAAC,wBAAD,EAA0B;AAACQ,IAAAA;AAAD,GAA1B,CAA1C;;AACA,MAAGU,OAAH,EAAW;AACPf,IAAAA,YAAY,CAAC;AACT2B,MAAAA,EAAE,EAAEtB,IADK;AAETuB,MAAAA,IAAI,EAAE;AAFG,KAAD,CAAZ;AAIH;;AAED9B,EAAAA,MAAM,CAAC;AAAC+B,IAAAA,KAAK,EAAEb;AAAR,GAAD,CAAN;AACD,CAVM;AAYR;;;;;;;AAMC,OAAO,MAAMmB,aAAa,GAAG,MAAMhC,OAAN,IAAiB;AAC1C,MAAI;AAACE,IAAAA,IAAD;AAAM+B,IAAAA;AAAN,MAAsBjC,OAA1B;AACA,MAAI;AAACW,IAAAA,IAAI,EAAE;AAACC,MAAAA,OAAD;AAASC,MAAAA;AAAT;AAAP,MAA4B,MAAMnB,IAAI,CAAC,qBAAD,EAAwB;AAACQ,IAAAA,IAAD;AAAM+B,IAAAA;AAAN,GAAxB,CAA1C;;AAEA,MAAGrB,OAAH,EAAW;AACPf,IAAAA,YAAY,CAAC;AACT2B,MAAAA,EAAE,EAAES,YADK;AAETR,MAAAA,IAAI,EAAE,WAFG;AAGTvB,MAAAA;AAHS,KAAD,CAAZ;AAKH;;AAEHP,EAAAA,MAAM,CAAC;AAAC+B,IAAAA,KAAK,EAAEb;AAAR,GAAD,CAAN;AACD,CAbM","sourcesContent":["import {post} from 'axios';\r\nimport {Notify} from '../utils/utilMethods/handy-notification';\r\nimport * as followA from '../actions/follow';\r\nimport {insta_notify,uData} from './utils';\r\n\r\n/**\r\n * Follow user\r\n *\r\n * user, username & done properties must be provided.\r\n *\r\n * Provide update_followers when user's followers data need to be updated.\r\n * Eg. On Banner Comp.\r\n *\r\n * Provide update_followings when user's followings data need to be updated.\r\n * Eg. On Followers Comp.\r\n *\r\n * Provide dispatch when either update_followers OR update_followings needs to be updated\r\n *\r\n * Provide Firstname & Surname when update_followings=true\r\n *\r\n * Provide username as it used for notifying.\r\n *\r\n * @param {Object} options Options for following user\r\n * @param {Number} options.user\r\n * @param {String} options.username\r\n * @param {firstname} options.firstname\r\n * @param {surname} options.surname\r\n * @param {Boolean} options.update_followers\r\n * @param {Boolean} options.update_followings\r\n * @param {Function} options.dispatch\r\n * @param {Function} options.done\r\n */\r\n export const follow = async options => {\r\n     let defaults = {\r\n          user: null,\r\n          username: null,\r\n          firstname: null,\r\n          surname: null,\r\n          update_followers: false,\r\n          update_followings: false,\r\n          dispatch: () => null,\r\n          done: () => null\r\n         };\r\n      let obj = {...defaults,...options};\r\n      let {user,username,firstname,surname,update_followers,update_followings,dispatch,done} = obj;\r\n      let {data: {success,message,ff}} = await post('/api/follow',{user,username});\r\n\r\n      if(success){\r\n          let following = {\r\n              follow_id: ff.follow_id,\r\n              follow_to: user,\r\n              follow_by: Number(uData('session')),\r\n              username,\r\n              firstname,\r\n              surname,\r\n              isFollowing: true,\r\n              follow_time: ff.follow_time\r\n            };\r\n\r\n         if(update_followers){ \r\n             dispatch(followA.Follower(ff))\r\n         }\r\n         if(update_followings){\r\n            dispatch(followA.Following(following))\r\n         }\r\n\r\n         insta_notify({\r\n             to: user,\r\n             type: 'follow'\r\n          });\r\n        done();\r\n      }\r\n\r\n   Notify({ value: message})   \r\n }\r\n\r\n/**\r\n * Unfollow user\r\n *\r\n * user & done properties must be provided.\r\n *\r\n * Provide update_followers when user's followers data need to be updated.\r\n * Eg. On Banner Comp.\r\n *\r\n * Provide update_followings when user's followings data need to be updated.\r\n * Eg. On Followers Comp.\r\n *\r\n * Provide dispatch when either update_followers OR update_followings needs to be updated\r\n *\r\n * @param {Object} options Options for unfollowing user\r\n * @param {Number} options.user\r\n * @param {Boolean} options.update_followers\r\n * @param {Boolean} options.update_followings\r\n * @param {Function} options.dispatch\r\n * @param {Function} options.done\r\n */\r\n  export const unfollow = async options => {\r\n      let defaults = {\r\n          user: null,\r\n          update_followers: false,\r\n          update_followings: false,\r\n          dispatch: () => null,\r\n          done: () => null\r\n         };\r\n       let obj = {...defaults,...options};\r\n       let {user,update_followers,update_followings,dispatch,done} = obj;\r\n       let session = uData('session');\r\n       let {data: {success,message}} = await post('/api/unfollow',{user});\r\n\r\n       if(success){\r\n           if(update_followers){\r\n               dispatch(followA.Unfollower(session))\r\n           }   \r\n          \r\n           if(update_followings){\r\n              dispatch(followA.Unfollowing(user));\r\n           }  \r\n           done();\r\n       }\r\n\r\n       Notify({ value: message})\r\n  }\r\n\r\n/**\r\n * Add user to favorites\r\n * @param {Number} user User to add to favorites\r\n */\r\n export const addToFavourites = async user => {\r\n   let {data: {success,message}} = await post('/api/add-to-favourites',{user});\r\n   if(success){\r\n       insta_notify({\r\n           to: user,\r\n           type: 'Favourites'\r\n       })\r\n   }\r\n\r\n   Notify({value: message })\r\n }\r\n\r\n/**\r\n * Recommends a user\r\n * @param {Object} options\r\n * @param {Number} options.recommend_to\r\n * @param {Number} options.user\r\n */\r\n export const recommendUser = async options => {\r\n     let {user,recommend_to} = options;\r\n     let {data: {success,message}} = await post('/api/recommend-user', {user,recommend_to});\r\n\r\n     if(success){\r\n         insta_notify({\r\n             to: recommend_to,\r\n             type: 'recommend',\r\n             user\r\n         })\r\n     }\r\n\r\n   Notify({value: message})  \r\n }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}