{"ast":null,"code":"import axios, { post } from 'axios';\nimport { notify } from '../utils/utilMethods/handy-notification';\nimport { getUserDetails, getMutualUsers } from '../actions/user';\nimport { isFollowing, getUserStats } from '../actions/follow';\nimport { getUserPosts, getGroupPosts } from '../actions/post';\nimport { getGroupDetails, joinedGroup } from '../actions/group';\nimport Compress from 'image-compressor.js';\nimport d from './api/Dom';\n/**\r\n *  Shortens what with string length\r\n * @param {String} what\r\n * @param {Number} length\r\n */\n\nexport const shortener = (what, length) => {\n  let parse = parseInt(length),\n      len = what.length;\n\n  if (!parse) {\n    return;\n  }\n\n  return len >= parse ? `${what.substr(0, length - 2)} ..` : len < parse ? what : null;\n};\n/**\r\n * Returns data stored in dataset,(The data() method allows us to attach data of any type \r\n * to DOM elements in a way that is safe from circular)\r\n *  references and therefore from memory leaks.\r\n * @param {String} what Which data\r\n */\n\nexport const uData = what => new d('.data').data(what);\n/**\r\n * Returns unique string, useful for key\r\n * the random number we convert to hexdecimal value and with \r\n * slice() start from element in position(i=3,4,5....)\r\n */\n\nexport const uniq = () => Math.random().toString(16).slice(2);\nexport const randNum = () => Math.random() * 200;\n/**\r\n* Returns human-readable text\r\n*\r\n* @param {Number} value\r\n* @param {String} text\r\n*/\n\nexport const humanReadable = (value, text) => {\n  let hr = value === 0 ? `No ${text}s` : value === 1 ? `1 ${text}` : `${value} ${text}s`;\n  return hr;\n};\n/**\r\n * Toggles the element\r\n * @param {HTMLElement} el element to toggle\r\n */\n\nexport const toggle = el => {\n  let style = el.style.display;\n  style === 'none' ? style = 'block' : style = 'none';\n};\n/**\r\n* Capitalizes str\r\n* @param {String} str\r\n*/\n\nexport const capitalizes_first = str => str.charAt(0).toUpperCase() + str.substr(1);\n/**\r\n * Removes hr of last element of modal\r\n */\n\nexport const removeHr = () => {\n  let elements = Array.from(new d('.modal_items').toAll());\n  let element = elements[elements.length - 1];\n  return element ? Array.from(element.children).map(child => child.nodeName === 'hr' ? child.remove() : null) : null;\n};\n/**\r\n * Toggle show password\r\n */\n\nexport const viewPassword = ({\n  input,\n  icon\n}) => {\n  let _input = new d(input);\n\n  let _icon = new d(icon);\n\n  if (_input.getAttr('type') === 'password') {\n    _input.setAttr('type', 'text');\n\n    _input.html('<i class=\"fas fa-unlock-alt\"></i>');\n\n    _input.css('color', '#e91e63');\n  } else {\n    _input.setAttr('type', 'password');\n\n    _icon.html('<i class=\"fas fa-lock\"></i>');\n\n    _icon.css('color', 'darkturquoise');\n  }\n\n  _input.focus();\n};\n/**\r\n * For replacing illegal characters\r\n */\n\nexport const replacer = (el, filter) => {\n  let elem = new d(el);\n  let regex = filter === 'normal' ? /[^a-z0-9_.@$#]/i : filter = 'bio' ? /[<>]/i : null;\n  elem.on('keyup', e => {\n    let value = e.currentTarget.value;\n    elem.setValue(value.replace(regex, ''));\n  });\n};\n/**\r\n* Returns whether it's me\r\n*/\n\nexport const Me = user => user == uData('session') ? true : false;\n/**\r\n* Returns whether email is verified\r\n*/\n\nexport const email_verified = () => {\n  let ev = uData('emailVerified');\n  return ev === 'yes' ? true : false;\n};\n/**\r\n * Returns whether user is private\r\n */\n\nexport const isPrivate = (user, isFollowing, accountType) => {\n  let uprivate = !Me(user) && !isFollowing && accountType === 'private' ? true : false;\n  return uprivate;\n};\n/**\r\n * Compresses and returns file\r\n * @param {File} file\r\n */\n\nexport const imageCompressor = file => {\n  return new Promise(resolve => {\n    new Compress(file, {\n      quality: 0.6,\n      success: file => resolve(file),\n      error: err => console.log(err.message)\n    });\n  });\n};\n/**\r\n * For profile\r\n */\n\nexport const forProfile = async options => {\n  let {\n    username,\n    dispatch,\n    invalidUser\n  } = options,\n      {\n    data: valid\n  } = await post('/api/is-user-valid', {\n    username\n  }),\n      s_username = uData('username');\n\n  if (!valid) {\n    invalidUser();\n  } else {\n    if (username !== s_username) {\n      dispatch(isFollowing(username));\n      dispatch(getMutualUsers(username));\n      post('/api/view-profile', {\n        username\n      });\n    }\n\n    dispatch(getUserDetails(username));\n    dispatch(getUserStats(username));\n    dispatch(getUserPosts(username));\n  }\n};\n/**\r\n * For group\r\n */\n\nexport const forGroup = async options => {\n  let {\n    group_id,\n    dispatch,\n    invalidGroup\n  } = options,\n      {\n    data: valid\n  } = await post('/api/is-group-valid', {\n    group_id\n  });\n\n  if (!valid) {\n    invalidGroup();\n  } else {\n    dispatch(joinedGroup(group_id));\n    dispatch(getGroupDetails(group_id));\n    dispatch(getGroupPosts(group_id));\n  }\n};\n/**\r\n* Scrolls down to 380\r\n*/\n\nexport const bottomScroll = () => new d('html', 'body').toDom().scrollTop = 380;\n/**\r\n * Notifies user [on the notification page]\r\n * @param {Object} options\r\n * @param {Number} options.to\r\n * @param {String} options.type\r\n * @param {Number} options.post_id\r\n * @param {Number} options.group_id\r\n * @param {Number} options.user\r\n */\n\nexport const insta_notify = async options => {\n  let defaults = {\n    to: null,\n    type: '',\n    post_id: 0,\n    group_id: 0,\n    user: 0\n  };\n  let obj = { ...defaults,\n    ...options\n  };\n  let {\n    to,\n    type,\n    post_id,\n    group_id,\n    user\n  } = obj;\n  await post('/api/notify', {\n    to,\n    type,\n    post_id,\n    group_id,\n    user\n  });\n};\n/**\r\n* Dispatcher helper for dispatching data retrieved from URL\r\n*\r\n* @param {String} type Dispatch type\r\n* @param {String} url /api/URL to get data from\r\n* @param {Object} data data requested with the url\r\n*/\n\nexport const dispatchHelper = (type, url, data = {}) => {\n  return dispatch => post(`/api/${url}`, data).then(p => dispatch({\n    type,\n    payload: p.data\n  })).catch(e => console.log(e));\n};\n/**\r\n * If mssg is an array returns first element else returns it as a string.\r\n *\r\n * @param {String} mssg Message value\r\n * @returns { String } Individual string message\r\n */\n\nexport const ObjectMssg = message => {\n  return typeof message === 'object' ? message.length > 0 ? message[0] : message : message;\n};\n/**\r\n * Notifies 'please wait..'\r\n */\n\nexport const wait = () => notify({\n  value: 'Please wait ...'\n});\n/**\r\n * If loading, then add 'cLoading' class to the specified component which hides it until it is loaded\r\n * @param {Boolean} loading\r\n */\n\nexport const cLoading = loading => `${loading ? 'cLoading' : ''}`;\n/**\r\n* Request a response from an API endpoint.\r\n* @param {String} url Url to get response from\r\n* @param {Object} data Optional data to pass\r\n* @param {String} method Method type. Default is post\r\n*/\n\nexport const APIRequest = (url, data = {}, method = 'post') => {\n  new Promise((resolve, reject) => {\n    axios[method](url, data).then(resp => resolve(resp)).catch(error => reject(error));\n  });\n};","map":{"version":3,"sources":["C:/JavascriptProjects3/instagramClone/client/src/utils/utils.js"],"names":["axios","post","notify","getUserDetails","getMutualUsers","isFollowing","getUserStats","getUserPosts","getGroupPosts","getGroupDetails","joinedGroup","Compress","d","shortener","what","length","parse","parseInt","len","substr","uData","data","uniq","Math","random","toString","slice","randNum","humanReadable","value","text","hr","toggle","el","style","display","capitalizes_first","str","charAt","toUpperCase","removeHr","elements","Array","from","toAll","element","children","map","child","nodeName","remove","viewPassword","input","icon","_input","_icon","getAttr","setAttr","html","css","focus","replacer","filter","elem","regex","on","e","currentTarget","setValue","replace","Me","user","email_verified","ev","isPrivate","accountType","uprivate","imageCompressor","file","Promise","resolve","quality","success","error","err","console","log","message","forProfile","options","username","dispatch","invalidUser","valid","s_username","forGroup","group_id","invalidGroup","bottomScroll","toDom","scrollTop","insta_notify","defaults","to","type","post_id","obj","dispatchHelper","url","then","p","payload","catch","ObjectMssg","wait","cLoading","loading","APIRequest","method","reject","resp"],"mappings":"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","sourcesContent":["import axios,{post} from 'axios';\r\nimport {notify} from '../utils/utilMethods/handy-notification';\r\nimport {getUserDetails,getMutualUsers} from '../actions/user';\r\nimport {isFollowing,getUserStats} from '../actions/follow';\r\nimport {getUserPosts,getGroupPosts} from '../actions/post';\r\nimport {getGroupDetails,joinedGroup} from  '../actions/group';\r\nimport Compress from 'image-compressor.js';\r\nimport d from './api/Dom';\r\n\r\n/**\r\n *  Shortens what with string length\r\n * @param {String} what\r\n * @param {Number} length\r\n */\r\nexport const shortener = (what,length) => {\r\n    let parse = parseInt(length),\r\n    len = what.length;\r\n\r\n    if(!parse){\r\n        return\r\n    }\r\n\r\n    return len >= parse ? `${what.substr(0,length -2)} ..` : (len < parse ? what : null)\r\n}\r\n\r\n/**\r\n * Returns data stored in dataset,(The data() method allows us to attach data of any type \r\n * to DOM elements in a way that is safe from circular)\r\n *  references and therefore from memory leaks.\r\n * @param {String} what Which data\r\n */\r\n export const uData = what => new d('.data').data(what);\r\n\r\n/**\r\n * Returns unique string, useful for key\r\n * the random number we convert to hexdecimal value and with \r\n * slice() start from element in position(i=3,4,5....)\r\n */\r\n export const uniq = () => Math.random().toString(16).slice(2)\r\n\r\n export const randNum = () => Math.random() * 200;\r\n\r\n /**\r\n * Returns human-readable text\r\n *\r\n * @param {Number} value\r\n * @param {String} text\r\n */\r\n export const humanReadable = (value,text) => {\r\n     let hr = value === 0 ? `No ${text}s` : value === 1 ? `1 ${text}` : `${value} ${text}s`\r\n     return hr;\r\n }\r\n\r\n/**\r\n * Toggles the element\r\n * @param {HTMLElement} el element to toggle\r\n */\r\n export const toggle = el => {\r\n     let style = el.style.display;\r\n     style === 'none' ? (style = 'block') : (style = 'none')\r\n }\r\n\r\n /**\r\n * Capitalizes str\r\n * @param {String} str\r\n */\r\n export const capitalizes_first = str => str.charAt(0).toUpperCase() + str.substr(1);\r\n\r\n/**\r\n * Removes hr of last element of modal\r\n */\r\n export const removeHr = () => {\r\n     let elements = Array.from(new d('.modal_items').toAll());\r\n     let element = elements[elements.length -1];\r\n\r\n    return  element ? Array.from(element.children).map(child => \r\n        (child.nodeName === 'hr' ? child.remove() : null)) : null\r\n }\r\n\r\n/**\r\n * Toggle show password\r\n */\r\n export const viewPassword = ({input,icon}) => {\r\n     let _input = new d(input);\r\n     let _icon = new d(icon);\r\n\r\n     if(_input.getAttr('type') === 'password'){\r\n         _input.setAttr('type','text');\r\n         _input.html('<i class=\"fas fa-unlock-alt\"></i>');\r\n         _input.css('color','#e91e63')\r\n     }else{\r\n         _input.setAttr('type','password');\r\n         _icon.html('<i class=\"fas fa-lock\"></i>');\r\n         _icon.css('color','darkturquoise')\r\n     }\r\n     _input.focus()\r\n }\r\n\r\n/**\r\n * For replacing illegal characters\r\n */\r\n export const replacer = (el,filter) => {\r\n     let elem = new d(el);\r\n     let regex = filter === 'normal' ? /[^a-z0-9_.@$#]/i : filter = 'bio' ? /[<>]/i : null;\r\n\r\n     elem.on('keyup', e => {\r\n         let value = e.currentTarget.value;\r\n         elem.setValue(value.replace(regex,''))\r\n     })\r\n }\r\n\r\n /**\r\n * Returns whether it's me\r\n */\r\n export const Me = user => (user == uData('session') ? true : false)\r\n\r\n /**\r\n * Returns whether email is verified\r\n */\r\n export const email_verified = () => {\r\n     let ev = uData('emailVerified');\r\n     return ev === 'yes' ? true : false\r\n }\r\n\r\n/**\r\n * Returns whether user is private\r\n */\r\nexport const isPrivate = (user,isFollowing,accountType) => {\r\n    let uprivate = !Me(user) && !isFollowing && accountType === 'private' ? true : false\r\n    return uprivate;\r\n}\r\n\r\n/**\r\n * Compresses and returns file\r\n * @param {File} file\r\n */\r\n export const imageCompressor = file => {\r\n     return new Promise(resolve => {\r\n         new Compress(file, {\r\n             quality: 0.6,\r\n             success: file => resolve(file),\r\n             error: err => console.log(err.message)\r\n         })\r\n     })\r\n }\r\n\r\n/**\r\n * For profile\r\n */\r\n export const forProfile = async options => {\r\n     let {username,dispatch,invalidUser} = options,\r\n     {data: valid} = await post('/api/is-user-valid',{username}),\r\n     s_username = uData('username');\r\n\r\n     if(!valid){\r\n         invalidUser()\r\n     } else{\r\n         if(username !== s_username){\r\n             dispatch(isFollowing(username));\r\n             dispatch(getMutualUsers(username));\r\n             post('/api/view-profile',{username})\r\n         }\r\n\r\n         dispatch(getUserDetails(username));\r\n         dispatch(getUserStats(username));\r\n         dispatch(getUserPosts(username));\r\n     }\r\n }\r\n\r\n/**\r\n * For group\r\n */\r\n export const forGroup = async options => {\r\n     let {group_id,dispatch,invalidGroup} = options,\r\n     {data: valid} = await post('/api/is-group-valid', {group_id});\r\n\r\n     if(!valid){\r\n         invalidGroup();\r\n     }else{\r\n         dispatch(joinedGroup(group_id));\r\n         dispatch(getGroupDetails(group_id));\r\n         dispatch(getGroupPosts(group_id));\r\n     }\r\n }\r\n\r\n /**\r\n * Scrolls down to 380\r\n */\r\n export const bottomScroll = () => (new d('html','body').toDom().scrollTop = 380)\r\n\r\n/**\r\n * Notifies user [on the notification page]\r\n * @param {Object} options\r\n * @param {Number} options.to\r\n * @param {String} options.type\r\n * @param {Number} options.post_id\r\n * @param {Number} options.group_id\r\n * @param {Number} options.user\r\n */\r\n export const insta_notify = async options => {\r\n     let defaults = {\r\n         to:null,\r\n         type: '',\r\n         post_id: 0,\r\n         group_id: 0,\r\n         user: 0\r\n        };\r\n     let obj = {\r\n         ...defaults,\r\n         ...options\r\n     };\r\n     let {to,type,post_id,group_id,user} = obj;\r\n\r\n\r\n     await post('/api/notify',{to,type,post_id,group_id,user})\r\n }\r\n\r\n /**\r\n * Dispatcher helper for dispatching data retrieved from URL\r\n *\r\n * @param {String} type Dispatch type\r\n * @param {String} url /api/URL to get data from\r\n * @param {Object} data data requested with the url\r\n */\r\n export const dispatchHelper = (type,url,data={}) => {\r\n     return dispatch => post(`/api/${url}`,data)\r\n        .then(p => dispatch({type,payload: p.data}))\r\n        .catch(e => console.log(e))\r\n }\r\n\r\n/**\r\n * If mssg is an array returns first element else returns it as a string.\r\n *\r\n * @param {String} mssg Message value\r\n * @returns { String } Individual string message\r\n */\r\n export const ObjectMssg = message => {\r\n     return typeof message === 'object' ? (message.length > 0 ? message[0] : message) : message;\r\n }\r\n\r\n/**\r\n * Notifies 'please wait..'\r\n */\r\n export const wait = () => notify({value: 'Please wait ...'})\r\n\r\n/**\r\n * If loading, then add 'cLoading' class to the specified component which hides it until it is loaded\r\n * @param {Boolean} loading\r\n */\r\n export const cLoading = loading => `${loading ? 'cLoading' : ''}`\r\n\r\n /**\r\n * Request a response from an API endpoint.\r\n * @param {String} url Url to get response from\r\n * @param {Object} data Optional data to pass\r\n * @param {String} method Method type. Default is post\r\n */\r\n export const APIRequest = (url,data={},method='post') => {\r\n     new Promise((resolve,reject) => {\r\n         axios[method](url,data)\r\n           .then(resp => resolve(resp))\r\n           .catch(error => reject(error))\r\n     })\r\n }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}