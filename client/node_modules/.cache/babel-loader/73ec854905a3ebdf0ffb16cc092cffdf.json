{"ast":null,"code":"var _jsxFileName = \"C:\\\\JavascriptProjects3\\\\instagramClone\\\\client\\\\src\\\\components\\\\post\\\\comment\\\\comments\\\\comment-type.js\";\nimport React, { Fragment } from 'react';\nimport CommentTypeImage from './type-image';\nimport ToTags from '../../../hashtag/toTags/toTags';\nimport { string, oneOf } from 'prop-types';\n\nconst CommentType = ({\n  type,\n  text,\n  commentSrc\n}) => {\n  let noComment = {\n    fonStyle: 'italic',\n    display: 'block'\n  };\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 10\n    }\n  }, type === 'text' && !text ? /*#__PURE__*/React.createElement(\"span\", {\n    style: noComment,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 18\n    }\n  }, \"Empty comment\") : type === 'text' ? /*#__PURE__*/React.createElement(\"p\", {\n    className: \"ce\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 18\n    }\n  }, /*#__PURE__*/React.createElement(ToTags, {\n    str: text,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 22\n    }\n  })) : type == 'image' ? /*#__PURE__*/React.createElement(CommentTypeImage, {\n    commentSrc: commentSrc,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 18\n    }\n  }) : type == 'sticker' ? /*#__PURE__*/React.createElement(\"img\", {\n    src: `/comments/${commentSrc}`,\n    className: \"comments_sticker\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 18\n    }\n  }) : null);\n};\n\nCommentType.propTypes = {\n  type: oneOf('text', 'image', 'sticker', '').isRequired,\n  text: string,\n  commentSrc: string\n};\nexport default CommentType;","map":{"version":3,"sources":["C:/JavascriptProjects3/instagramClone/client/src/components/post/comment/comments/comment-type.js"],"names":["React","Fragment","CommentTypeImage","ToTags","string","oneOf","CommentType","type","text","commentSrc","noComment","fonStyle","display","propTypes","isRequired"],"mappings":";AAAC,OAAOA,KAAP,IAAcC,QAAd,QAA6B,OAA7B;AACA,OAAOC,gBAAP,MAA6B,cAA7B;AACA,OAAOC,MAAP,MAAmB,gCAAnB;AACA,SAAQC,MAAR,EAAeC,KAAf,QAA2B,YAA3B;;AAEA,MAAMC,WAAW,GAAG,CAAC;AAACC,EAAAA,IAAD;AAAMC,EAAAA,IAAN;AAAWC,EAAAA;AAAX,CAAD,KAA4B;AAC5C,MAAIC,SAAS,GAAG;AACZC,IAAAA,QAAQ,EAAE,QADE;AAEZC,IAAAA,OAAO,EAAE;AAFG,GAAhB;AAKA,sBACI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKL,IAAI,KAAK,MAAT,IAAmB,CAACC,IAApB,gBACG;AAAM,IAAA,KAAK,EAAEE,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADH,GAEGH,IAAI,KAAK,MAAT,gBACA;AAAG,IAAA,SAAS,EAAC,IAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,MAAD;AAAQ,IAAA,GAAG,EAAEC,IAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADA,GAIAD,IAAI,IAAI,OAAR,gBACA,oBAAC,gBAAD;AAAkB,IAAA,UAAU,EAAEE,UAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,GAEAF,IAAI,IAAI,SAAR,gBACA;AAAK,IAAA,GAAG,EAAG,aAAYE,UAAW,EAAlC;AAAqC,IAAA,SAAS,EAAC,kBAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,GAEA,IAXR,CADJ;AAeH,CArBD;;AAuBAH,WAAW,CAACO,SAAZ,GAAwB;AACpBN,EAAAA,IAAI,EAAEF,KAAK,CAAC,MAAD,EAAQ,OAAR,EAAgB,SAAhB,EAA0B,EAA1B,CAAL,CAAmCS,UADrB;AAEpBN,EAAAA,IAAI,EAAEJ,MAFc;AAGpBK,EAAAA,UAAU,EAAEL;AAHQ,CAAxB;AAKA,eAAeE,WAAf","sourcesContent":[" import React,{Fragment} from 'react';\r\n import CommentTypeImage from './type-image';\r\n import ToTags from '../../../hashtag/toTags/toTags';\r\n import {string,oneOf} from 'prop-types';\r\n\r\n const CommentType = ({type,text,commentSrc}) => {\r\n     let noComment = {\r\n         fonStyle: 'italic',\r\n         display: 'block'\r\n     }\r\n\r\n     return (\r\n         <Fragment>\r\n             {type === 'text' && !text ? (\r\n                 <span style={noComment}>Empty comment</span>\r\n             ) : type === 'text' ? (\r\n                 <p className=\"ce\">\r\n                     <ToTags str={text} />\r\n                 </p>\r\n             ) : type == 'image' ? (\r\n                 <CommentTypeImage commentSrc={commentSrc} />\r\n             ) : type == 'sticker' ? (\r\n                 <img src={`/comments/${commentSrc}`} className=\"comments_sticker\" />\r\n             ) : null }\r\n         </Fragment>\r\n     )\r\n }\r\n\r\n CommentType.propTypes = {\r\n     type: oneOf('text','image','sticker','').isRequired,\r\n     text: string,\r\n     commentSrc: string\r\n }\r\n export default CommentType;"]},"metadata":{},"sourceType":"module"}