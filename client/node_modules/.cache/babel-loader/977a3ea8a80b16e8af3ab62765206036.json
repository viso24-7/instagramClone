{"ast":null,"code":"import { post } from 'axios';\nimport { comment } from '../actions/post';\nimport { Notify } from '../utils/utilMethods/handy-notification';\nimport { imageCompressor, insta_notify, Me, uData, wait } from './utils';\nimport d from './api/Dom';\n/**\r\n * A helper for dispatching actions related to comments\r\n * @param {Object} options\r\n */\n\nconst commentDispatchHelper = async options => {\n  let {\n    user,\n    post_id,\n    comment_id,\n    commentExtraDetails,\n    when,\n    dispatch\n  } = options;\n  let session = uData('session');\n  let username = uData('username');\n\n  if (when === 'viewPost') {\n    dispatch(comment({\n      comment_id,\n      comment_by: Number(session),\n      comment_by_username: username,\n      post_id,\n      comment_ime: `${new Date().getTime()}`,\n      ...commentExtraDetails\n    }));\n  }\n\n  if (!Me(user)) {\n    insta_notify({\n      to: user,\n      type: 'comment',\n      post_id\n    });\n  }\n};\n/**\r\n * Image comment\r\n * @param {Object} options\r\n * @param {Number} options.post_id\r\n * @param {Function} options.dispatch\r\n * @param {String} options.when\r\n * @param {Number} options.user\r\n * @param {File} options.file\r\n * @param {Function} options.done\r\n */\n\n\nexport const imageComment = async options => {\n  let {\n    post_id,\n    dispatch,\n    when,\n    user,\n    file: commentFile,\n    done\n  } = options;\n  let form = new FormData();\n  let file = await imageCompressor(commentFile);\n  let d = new d('.overlay-2');\n  d.show();\n  wait();\n  form.append('commentImage', file);\n  form.append('post', post_id);\n  let {\n    data: {\n      success,\n      message,\n      filename,\n      comment_id\n    }\n  } = await post('/api/comment-image', form);\n\n  if (success) {\n    await commentDispatchHelper({\n      user,\n      post_id,\n      comment_id,\n      when,\n      dispatch,\n      commentExtraDetails: {\n        type: 'image',\n        commentSrc: filename,\n        text: ''\n      }\n    });\n    done();\n  }\n\n  d.hide();\n  Notify({\n    value: message\n  });\n};\n/**\r\n * Sticker comment\r\n * @param {Object} options\r\n * @param {String} options.sticker\r\n * @param {Number} options.post_id\r\n * @param {Number} options.user\r\n * @param {String} options.when\r\n * @param {Function} options.dispatch\r\n */\n\nexport const stickerComment = async options => {\n  let {\n    sticker,\n    post_id,\n    user,\n    when,\n    dispatch,\n    done\n  } = options;\n  let {\n    data: {\n      message,\n      success,\n      comment_id,\n      filename\n    }\n  } = await post('/api/comment-sticker', {\n    sticker,\n    post: post_id\n  });\n  wait();\n\n  if (success) {\n    await commentDispatchHelper({\n      user,\n      post_id,\n      comment_id,\n      when,\n      dispatch,\n      commentExtraDetails: {\n        type: 'sticker',\n        commentSrc: filename,\n        text: ''\n      }\n    });\n    done();\n  }\n\n  Notify({\n    value: message\n  });\n};\n/**\r\n * Text comment\r\n * @param {Object} options\r\n * @param {Number} options.post\r\n * @param {String} options.text\r\n * @param {String} options.when\r\n * @param {Function} options.dispatch\r\n * @param {Number} options.postOwner\r\n */\n\nexport const textComment = async options => {\n  let {\n    post: post_id,\n    text,\n    when,\n    dispatch,\n    postOwner,\n    done\n  } = options;\n  let {\n    data: {\n      success,\n      message,\n      comment_id\n    }\n  } = await post('/api/comment-text', {\n    post_id,\n    text\n  });\n\n  if (success) {\n    await commentDispatchHelper({\n      user: postOwner,\n      post_id,\n      comment_id,\n      when,\n      dispatch,\n      commentExtraDetails: {\n        type: 'text',\n        commentSrc: '',\n        text\n      }\n    });\n    done();\n  }\n\n  Notify({\n    value: message\n  });\n};","map":{"version":3,"sources":["C:/JavascriptProjects3/instagramClone/client/src/utils/comment-utils.js"],"names":["post","comment","Notify","imageCompressor","insta_notify","Me","uData","wait","d","commentDispatchHelper","options","user","post_id","comment_id","commentExtraDetails","when","dispatch","session","username","comment_by","Number","comment_by_username","comment_ime","Date","getTime","to","type","imageComment","file","commentFile","done","form","FormData","show","append","data","success","message","filename","commentSrc","text","hide","value","stickerComment","sticker","textComment","postOwner"],"mappings":"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","sourcesContent":["import {post} from 'axios';\r\nimport {comment} from '../actions/post';\r\nimport {Notify} from '../utils/utilMethods/handy-notification';\r\nimport {imageCompressor,insta_notify,Me,uData,wait} from './utils';\r\nimport d from './api/Dom'\r\n\r\n/**\r\n * A helper for dispatching actions related to comments\r\n * @param {Object} options\r\n */\r\n const commentDispatchHelper = async options => {\r\n     let {user,post_id,comment_id,commentExtraDetails,when,dispatch} = options;\r\n     let session = uData('session');\r\n     let username = uData('username');\r\n\r\n     if(when === 'viewPost'){\r\n         dispatch(comment({\r\n               comment_id,\r\n               comment_by: Number(session),\r\n               comment_by_username: username,\r\n               post_id,\r\n               comment_ime: `${new Date().getTime()}`,\r\n               ...commentExtraDetails\r\n             }))\r\n     }\r\n\r\n     if(!Me(user)){\r\n         insta_notify({\r\n             to: user,\r\n             type: 'comment',\r\n             post_id\r\n         })\r\n     }\r\n }\r\n\r\n/**\r\n * Image comment\r\n * @param {Object} options\r\n * @param {Number} options.post_id\r\n * @param {Function} options.dispatch\r\n * @param {String} options.when\r\n * @param {Number} options.user\r\n * @param {File} options.file\r\n * @param {Function} options.done\r\n */\r\n export const imageComment = async options => {\r\n     let {post_id,dispatch,when,user,file:commentFile,done} = options;\r\n     let form = new FormData();\r\n     let file = await imageCompressor(commentFile);\r\n     let d = new d('.overlay-2');\r\n\r\n     d.show();\r\n     wait();\r\n\r\n     form.append('commentImage',file);\r\n     form.append('post',post_id);\r\n\r\n     let { data:{success,message,filename,comment_id}} = await post('/api/comment-image',form);\r\n     if(success){\r\n         await commentDispatchHelper({\r\n             user,\r\n             post_id,\r\n             comment_id,\r\n             when,\r\n             dispatch,\r\n             commentExtraDetails: {\r\n                 type: 'image',\r\n                 commentSrc: filename,\r\n                 text: ''\r\n             }\r\n         })\r\n\r\n         done();\r\n     }\r\n\r\n     d.hide();\r\n     Notify({\r\n         value: message\r\n     })\r\n }\r\n\r\n/**\r\n * Sticker comment\r\n * @param {Object} options\r\n * @param {String} options.sticker\r\n * @param {Number} options.post_id\r\n * @param {Number} options.user\r\n * @param {String} options.when\r\n * @param {Function} options.dispatch\r\n */\r\n  export const stickerComment = async options => {\r\n      let {sticker,post_id,user,when,dispatch,done} = options;\r\n      let {data: {message,success,comment_id,filename}} = await post('/api/comment-sticker', {sticker,post: post_id});\r\n      \r\n      wait();\r\n      if(success){\r\n          await commentDispatchHelper({\r\n            user,\r\n            post_id,\r\n            comment_id,\r\n            when,\r\n            dispatch,\r\n            commentExtraDetails: {\r\n                type: 'sticker',\r\n                commentSrc: filename,\r\n                text: ''\r\n            }\r\n          })\r\n          done();\r\n      }\r\n\r\n      Notify({\r\n          value: message\r\n      })\r\n  }\r\n\r\n/**\r\n * Text comment\r\n * @param {Object} options\r\n * @param {Number} options.post\r\n * @param {String} options.text\r\n * @param {String} options.when\r\n * @param {Function} options.dispatch\r\n * @param {Number} options.postOwner\r\n */\r\n export const textComment = async options => {\r\n     let {post: post_id,text,when,dispatch,postOwner,done} = options;\r\n     let {data: {success,message,comment_id}} = await post('/api/comment-text', {post_id,text});\r\n\r\n     if(success){\r\n         await commentDispatchHelper({\r\n             user: postOwner,\r\n             post_id,\r\n             comment_id,\r\n             when,\r\n             dispatch,\r\n             commentExtraDetails: {\r\n                 type: 'text',\r\n                 commentSrc: '',\r\n                 text\r\n             }\r\n         })\r\n\r\n         done();\r\n     }\r\n\r\n     Notify({\r\n         value: message\r\n     });\r\n }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}