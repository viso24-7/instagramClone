{"ast":null,"code":"import { post } from 'axios';\nimport { notify } from '../utils/utilMethods/handy-notification';\nimport { unblockUser } from '../actions/settings';\nimport { ObjectMssg, wait } from './utils';\nimport Action from './api/Action';\n/**\r\n * Block user\r\n * @param {Number} user User to block\r\n */\n\nexport const blockUser = async user => {\n  let {\n    data: {\n      message\n    }\n  } = await post('/api/block', {\n    user\n  });\n  notify({\n    value: message\n  });\n};\n/**\r\n *\r\n * @param {Object} options\r\n * @param {Number} options.block_id\r\n * @param {String} options.username\r\n * @param {Function} options.dispatch\r\n */\n\nexport const unBlockUser = async options => {\n  let {\n    username,\n    block_id,\n    dispatch\n  } = options;\n  let {\n    data: {\n      success,\n      message\n    }\n  } = await post('/api/unblock-user', {\n    block_id\n  });\n\n  if (success) {\n    dispatch(unblockUser(block_id));\n    notify({\n      value: `Unblocked ${username}`\n    });\n  } else {\n    notify({\n      value: message\n    });\n  }\n};\n/**\r\n * Changes the password of session user\r\n * @param {String} old Old/Current password\r\n * @param {String} new_ New password\r\n * @param {String} new_a New password again for surety\r\n */\n\nexport const changePassword = async (old, new_, new_a) => {\n  let action = new Action('.c_p_btn');\n\n  if (!old && !new_ && !new_a) {\n    notify({\n      value: 'Some value are missing'\n    });\n  } else if (new_ !== new_a) {\n    notify({\n      value: 'New password does not match'\n    });\n  } else {\n    action.start('Changing password ');\n    wait();\n    let {\n      data: {\n        success,\n        message\n      }\n    } = await post('/user/change-password', {\n      old,\n      new_,\n      new_a\n    });\n\n    if (success) {\n      notify({\n        value: message,\n        done: () => window.location.reload()\n      });\n    } else {\n      notify({\n        value: ObjectMssg(message)\n      });\n      action.end('Change password');\n    }\n  }\n};\n/**\r\n * Change user's password\r\n * @param {String} password User's password\r\n */\n\nexport const deactivateAccount = async (password, hidePrompt) => {\n  let action = new Action('.prompt-done');\n  action.start('Deactivating ...');\n  wait();\n  let {\n    data: {\n      success,\n      message\n    }\n  } = await post('/user/deactivate-acount', {\n    password\n  });\n  action.end('Deactivated');\n  notify({\n    value: message,\n    done: () => {\n      success ? window.location.href = '/login' : hidePrompt();\n    }\n  });\n};","map":{"version":3,"sources":["C:/JavascriptProjects3/instagramClone/client/src/utils/setting-utils.js"],"names":["post","notify","unblockUser","ObjectMssg","wait","Action","blockUser","user","data","message","value","unBlockUser","options","username","block_id","dispatch","success","changePassword","old","new_","new_a","action","start","done","window","location","reload","end","deactivateAccount","password","hidePrompt","href"],"mappings":"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","sourcesContent":["import {post} from 'axios';\r\nimport {notify} from '../utils/utilMethods/handy-notification';\r\nimport {unblockUser} from '../actions/settings';\r\nimport {ObjectMssg,wait} from  './utils';\r\nimport Action from './api/Action';\r\n\r\n/**\r\n * Block user\r\n * @param {Number} user User to block\r\n */\r\n  export const blockUser = async user => {\r\n      let {data: {message}} = await post('/api/block', {user});\r\n      notify({ value: message})\r\n  }\r\n\r\n/**\r\n *\r\n * @param {Object} options\r\n * @param {Number} options.block_id\r\n * @param {String} options.username\r\n * @param {Function} options.dispatch\r\n */\r\n export const unBlockUser = async options => {\r\n     let {username,block_id,dispatch} = options;\r\n     let {data: {success,message}} = await post('/api/unblock-user',{block_id});\r\n\r\n     if(success){\r\n         dispatch(unblockUser(block_id));\r\n         notify({ value: `Unblocked ${username}`})\r\n     } else {\r\n         notify({value: message})\r\n     }\r\n  } \r\n\r\n/**\r\n * Changes the password of session user\r\n * @param {String} old Old/Current password\r\n * @param {String} new_ New password\r\n * @param {String} new_a New password again for surety\r\n */\r\n export const changePassword = async (old,new_,new_a) => {\r\n     let action = new Action('.c_p_btn');\r\n\r\n     if(!old && !new_ && !new_a){\r\n         notify({ value: 'Some value are missing'})\r\n     } else if(new_ !== new_a){\r\n         notify({value: 'New password does not match'})\r\n     } else {\r\n         action.start('Changing password ');\r\n         wait();\r\n\r\n         let {data: {success,message}} = await post('/user/change-password' ,{old,new_,new_a});\r\n         if(success){\r\n             notify({\r\n                 value: message,\r\n                 done: () => window.location.reload()\r\n             })\r\n         } else{\r\n             notify({ value: ObjectMssg(message)});\r\n             action.end('Change password')\r\n         }\r\n     }\r\n }\r\n\r\n/**\r\n * Change user's password\r\n * @param {String} password User's password\r\n */\r\n export const deactivateAccount = async (password,hidePrompt) => {\r\n     let action = new Action('.prompt-done');\r\n\r\n     action.start('Deactivating ...');\r\n     wait();\r\n     let {data: {success,message}} = await post('/user/deactivate-acount', {password});\r\n     action.end('Deactivated');\r\n\r\n     notify({\r\n         value: message,\r\n         done: () => {success ? (window.location.href = '/login') : hidePrompt()}\r\n     });\r\n }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}