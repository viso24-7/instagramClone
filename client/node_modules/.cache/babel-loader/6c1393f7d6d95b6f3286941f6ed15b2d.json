{"ast":null,"code":"import { GET_USER_POSTS, GET_BOOKMARKED_POSTS, GET_TAGGED_POSTS, GET_SHARED_POSTS, GET_PHOTOS, GET_GROUP_POSTS, GET_GROUP_PHOTOS, GET_FEED, GET_POST, GET_POST_TAGS, GET_POST_LIKES, REMOVE_LIKE, GET_USERS_TO_SHARE, GET_POST_SHARERS, ADD_USER_POST, ADD_GROUP_POST, EDIT_POST, DELETE_POST, UNTAG, REMOVE_SHARE, DELETE_COMMENT, EDIT_COMMENT, UNBOOKMARK, COMMENT, RESET_POSTIT } from './types';\nconst PostInitialState = {\n  fileInput: '',\n  fileChanged: false,\n  targetFile: '',\n  previewImg: '/img/location.jpg',\n  desc: '',\n  filter: 'filter-normal',\n  fetchingLocation: false,\n  location: '',\n  addTag: false,\n  tags: [],\n  showOverlay: false,\n  type: '',\n  group: null\n};\nconst initialState = {\n  posts: [],\n  bookmarks: [],\n  tagged: [],\n  shared: [],\n  photos: [],\n  feed: [],\n  viewPost: [],\n  likes: [],\n  tags: [],\n  posted: false,\n  isPostMine: false,\n  usersToShare: [],\n  sharers: [],\n  postIt: PostInitialState\n};\n\nconst deletePost = (posts, post) => posts.filter(p => p.post_id !== parseInt(post));\n\nconst unbookmark = (bookmarks, post) => bookmarks.filter(b => b.post_id !== post);\n\nconst removeShare = (sharers, share_id) => sharers.filter(s => s.share_id !== share_id);\n\nconst removeLike = (likes, like_id) => likes.filter(l => l.like_id !== like_id);\n\nconst addPost = (posts, post) => {\n  posts = [...posts, post];\n  return posts;\n};\n\nconst editPost = (posts, {\n  post_id,\n  description\n}) => {\n  return posts.map(p => {\n    if (p.post_id === post_id) {\n      p.description = description;\n    }\n\n    return p;\n  });\n};\n\nconst untag = (tags, user) => {\n  let tagedUsers = tags.filter(t => t.user !== user);\n  return tagedUsers;\n};\n\nconst comment = (post, comment) => {\n  post = { ...post,\n    comments: [...post.comments, comment]\n  };\n  return post;\n};\n\nconst editComment = (post, {\n  comment_id,\n  comment\n}) => {\n  let comments = post.comments.map(c => {\n    if (c.comment_id == comment_id) {\n      c.comment = comment;\n    }\n\n    return c;\n  });\n  return { ...post,\n    comments\n  };\n};\n\nconst deleteComment = (post, comment_id) => {\n  let comments = post.comments.filter(c => c.comment_id != comment_id);\n  return { ...post,\n    comments\n  };\n};\n\nconst changePostIt = (postIt, plOptions) => {\n  let {\n    what,\n    value\n  } = plOptions;\n  let updated = { ...postIt,\n    [what]: value\n  };\n  return updated;\n};\n\nconst resetPostItProperties = () => {\n  let reset = PostInitialState;\n  return reset;\n};\n\nexport default ((state = initialState, action) => {\n  let pl = action.payload;\n\n  switch (action.type) {\n    case GET_USER_POSTS:\n      return { ...state,\n        posts: pl\n      };\n\n    case GET_BOOKMARKED_POSTS:\n      return { ...state,\n        bookmarks: pl\n      };\n\n    case GET_TAGGED_POSTS:\n      return { ...state,\n        tagged: pl\n      };\n\n    case GET_SHARED_POSTS:\n      return { ...state,\n        shared: pl\n      };\n\n    case GET_PHOTOS:\n      return { ...state,\n        photos: pl\n      };\n\n    case GET_FEED:\n      return { ...state,\n        feed: pl\n      };\n\n    case GET_GROUP_POSTS:\n      return { ...state,\n        posts: pl\n      };\n\n    case GET_GROUP_PHOTOS:\n      return { ...state,\n        photos: pl\n      };\n\n    case GET_POST:\n      return { ...state,\n        viewPost: pl\n      };\n\n    case ADD_USER_POST:\n      return { ...state,\n        feed: addPost(state.feed, pl)\n      };\n\n    case ADD_GROUP_POST:\n      return { ...state,\n        posts: addPost(state.posts, pl)\n      };\n\n    case EDIT_POST:\n      return { ...state,\n        posts: editPost(state.posts, pl)\n      };\n\n    case DELETE_POST:\n      return { ...state,\n        posts: deletePost(state.posts, pl),\n        feed: deletePost(state.feed, pl)\n      };\n\n    case GET_POST_LIKES:\n      return { ...state,\n        likes: pl.likes,\n        isPostMine: pl.isPostMine\n      };\n\n    case REMOVE_LIKE:\n      return { ...state,\n        likes: removeLike(state.likes, pl)\n      };\n\n    case GET_POST_TAGS:\n      return { ...state,\n        tags: pl.tags,\n        isPostMine: pl.isPostMine\n      };\n\n    case UNTAG:\n      return { ...state,\n        tags: untag(state.tags, pl)\n      };\n\n    case GET_USERS_TO_SHARE:\n      return { ...state,\n        usersToShare: pl\n      };\n\n    case GET_POST_SHARERS:\n      return { ...state,\n        sharers: pl\n      };\n\n    case UNBOOKMARK:\n      return { ...state,\n        bookmarks: unbookmark(state.bookmarks, pl)\n      };\n\n    case REMOVE_SHARE:\n      return { ...state,\n        sharers: removeShare(state.sharers, pl)\n      };\n\n    case COMMENT:\n      return { ...state,\n        viewPost: comment(state.viewPost, pl)\n      };\n\n    case DELETE_COMMENT:\n      return { ...state,\n        viewPost: deleteComment(state.viewPost, pl)\n      };\n\n    case EDIT_COMMENT:\n      return { ...state,\n        viewPost: editComment(state.viewPost, pl)\n      };\n\n    case CHANGE_POSTIT_PROPS:\n      return { ...state,\n        postIt: changePostIt(state.postIt, pl)\n      };\n\n    case RESET_POSTIT:\n      return { ...state,\n        postIt: resetPostItProperties()\n      };\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["C:/JavascriptProjects3/instagramClone/client/src/reducers/Post.js"],"names":["GET_USER_POSTS","GET_BOOKMARKED_POSTS","GET_TAGGED_POSTS","GET_SHARED_POSTS","GET_PHOTOS","GET_GROUP_POSTS","GET_GROUP_PHOTOS","GET_FEED","GET_POST","GET_POST_TAGS","GET_POST_LIKES","REMOVE_LIKE","GET_USERS_TO_SHARE","GET_POST_SHARERS","ADD_USER_POST","ADD_GROUP_POST","EDIT_POST","DELETE_POST","UNTAG","REMOVE_SHARE","DELETE_COMMENT","EDIT_COMMENT","UNBOOKMARK","COMMENT","RESET_POSTIT","PostInitialState","fileInput","fileChanged","targetFile","previewImg","desc","filter","fetchingLocation","location","addTag","tags","showOverlay","type","group","initialState","posts","bookmarks","tagged","shared","photos","feed","viewPost","likes","posted","isPostMine","usersToShare","sharers","postIt","deletePost","post","p","post_id","parseInt","unbookmark","b","removeShare","share_id","s","removeLike","like_id","l","addPost","editPost","description","map","untag","user","tagedUsers","t","comment","comments","editComment","comment_id","c","deleteComment","changePostIt","plOptions","what","value","updated","resetPostItProperties","reset","state","action","pl","payload","CHANGE_POSTIT_PROPS"],"mappings":"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","sourcesContent":["import {GET_USER_POSTS,GET_BOOKMARKED_POSTS,GET_TAGGED_POSTS,GET_SHARED_POSTS,GET_PHOTOS,GET_GROUP_POSTS,\r\n    GET_GROUP_PHOTOS,GET_FEED,GET_POST,GET_POST_TAGS,GET_POST_LIKES,REMOVE_LIKE,GET_USERS_TO_SHARE,GET_POST_SHARERS,ADD_USER_POST,\r\n    ADD_GROUP_POST,EDIT_POST,DELETE_POST,UNTAG,REMOVE_SHARE,DELETE_COMMENT,EDIT_COMMENT,UNBOOKMARK,COMMENT,\r\n    RESET_POSTIT} from './types';\r\n\r\nconst PostInitialState = {\r\n     fileInput: '',\r\n     fileChanged: false,\r\n     targetFile: '',\r\n     previewImg: '/img/location.jpg',\r\n     desc: '',\r\n     filter: 'filter-normal',\r\n     fetchingLocation: false,\r\n     location: '',\r\n     addTag: false,\r\n     tags: [],\r\n     showOverlay: false,\r\n     type: '',\r\n     group: null\r\n };\r\n\r\n const initialState = {\r\n     posts: [],\r\n     bookmarks: [],\r\n     tagged: [],\r\n     shared: [],\r\n     photos: [],\r\n     feed: [],\r\n     viewPost: [],\r\n     likes: [],\r\n     tags: [],\r\n     posted: false,\r\n     isPostMine: false,\r\n     usersToShare: [],\r\n     sharers: [],\r\n     postIt: PostInitialState \r\n };\r\n\r\n const deletePost = (posts,post) => posts.filter(p => p.post_id !== parseInt(post));\r\n const unbookmark = (bookmarks,post) => bookmarks.filter(b => b.post_id !== post);\r\n const removeShare = (sharers,share_id) => sharers.filter(s => s.share_id !== share_id);\r\n const removeLike = (likes,like_id) => likes.filter(l => l.like_id !== like_id);\r\n\r\n const addPost = (posts,post) => {\r\n     posts = [...posts,post];\r\n     return posts;\r\n }\r\n\r\n const editPost = (posts,{post_id,description}) => {\r\n     return posts.map(p => {\r\n         if(p.post_id === post_id){\r\n             p.description = description\r\n         }\r\n         return p\r\n     })\r\n }\r\n\r\n const untag = (tags,user) => {\r\n     let tagedUsers = tags.filter(t => t.user !== user);\r\n     return tagedUsers;\r\n }\r\n\r\n const comment = (post,comment) => {\r\n     post = {\r\n         ...post,\r\n         comments: [...post.comments,comment]\r\n       };\r\n     return post;  \r\n }\r\n\r\n const editComment = (post,{comment_id,comment}) => {\r\n     let comments = post.comments.map(c => {\r\n         if(c.comment_id == comment_id){\r\n             c.comment = comment\r\n         }\r\n         return c;\r\n     });\r\n\r\n     return {\r\n         ...post,\r\n         comments\r\n     }\r\n }\r\n\r\n const deleteComment = (post,comment_id) => {\r\n     let comments = post.comments.filter(c => c.comment_id != comment_id)\r\n     return {\r\n         ...post,\r\n         comments\r\n     }\r\n }\r\n\r\n const changePostIt = (postIt,plOptions) => {\r\n     let {what,value} = plOptions;\r\n     let updated = {\r\n               ...postIt,\r\n               [what]: value\r\n            }\r\n    return updated;\r\n }\r\n\r\n const resetPostItProperties = () => {\r\n     let reset = PostInitialState;\r\n     return reset;\r\n }\r\n\r\n export default (state=initialState,action) => {\r\n     let pl = action.payload;\r\n     switch(action.type){\r\n            case GET_USER_POSTS:\r\n             return {\r\n                 ...state,\r\n                 posts: pl\r\n             }\r\n\r\n            case GET_BOOKMARKED_POSTS:\r\n             return {\r\n                 ...state,\r\n                 bookmarks: pl\r\n             }    \r\n\r\n            case GET_TAGGED_POSTS:\r\n              return {\r\n                  ...state,\r\n                  tagged: pl\r\n              }   \r\n\r\n            case GET_SHARED_POSTS:\r\n              return {\r\n                  ...state,\r\n                  shared: pl\r\n              }  \r\n              \r\n            case GET_PHOTOS:\r\n              return {\r\n                  ...state,\r\n                  photos: pl\r\n              }    \r\n\r\n            case GET_FEED:\r\n              return {\r\n                  ...state,\r\n                  feed: pl\r\n              }    \r\n\r\n            case GET_GROUP_POSTS:\r\n              return {\r\n                  ...state,\r\n                  posts: pl\r\n              }    \r\n\r\n            case GET_GROUP_PHOTOS:\r\n              return {\r\n                  ...state,\r\n                  photos: pl\r\n              }  \r\n              \r\n            case GET_POST:\r\n               return {\r\n                   ...state,\r\n                   viewPost: pl\r\n               }   \r\n\r\n            case ADD_USER_POST:\r\n               return {\r\n                   ...state,\r\n                   feed: addPost(state.feed,pl)\r\n               }  \r\n               \r\n            case ADD_GROUP_POST:\r\n               return {\r\n                   ...state,\r\n                   posts: addPost(state.posts,pl)\r\n               }    \r\n\r\n            case EDIT_POST:\r\n               return {\r\n                   ...state,\r\n                   posts: editPost(state.posts,pl)\r\n               }   \r\n               \r\n            case DELETE_POST:\r\n                return {\r\n                    ...state,\r\n                    posts: deletePost(state.posts,pl),\r\n                    feed: deletePost(state.feed,pl)\r\n                }  \r\n                \r\n            case GET_POST_LIKES:\r\n                return {\r\n                    ...state,\r\n                    likes: pl.likes,\r\n                    isPostMine: pl.isPostMine\r\n                } \r\n                \r\n             case REMOVE_LIKE:\r\n                 return {\r\n                     ...state,\r\n                     likes: removeLike(state.likes,pl)\r\n                 }   \r\n\r\n             case GET_POST_TAGS:\r\n                 return {\r\n                     ...state,\r\n                     tags: pl.tags,\r\n                     isPostMine: pl.isPostMine\r\n                 }   \r\n                 \r\n             case UNTAG:\r\n                return {\r\n                   ...state,\r\n                   tags: untag(state.tags,pl)\r\n                 }  \r\n                 \r\n             case GET_USERS_TO_SHARE:\r\n                 return {\r\n                     ...state,\r\n                     usersToShare: pl\r\n                 }  \r\n                 \r\n             case GET_POST_SHARERS:\r\n                 return {\r\n                     ...state,\r\n                     sharers: pl\r\n                 } \r\n                 \r\n             case UNBOOKMARK:\r\n                 return {\r\n                     ...state,\r\n                     bookmarks: unbookmark(state.bookmarks,pl)\r\n                 } \r\n                 \r\n             case REMOVE_SHARE:\r\n                 return {\r\n                     ...state,\r\n                     sharers: removeShare(state.sharers,pl)\r\n                 }    \r\n\r\n              case COMMENT:\r\n                  return {\r\n                      ...state,\r\n                      viewPost: comment(state.viewPost,pl)\r\n                  } \r\n                  \r\n              case DELETE_COMMENT:\r\n                  return {\r\n                      ...state,\r\n                      viewPost: deleteComment(state.viewPost,pl)\r\n                  }    \r\n\r\n              case EDIT_COMMENT:\r\n                  return {\r\n                      ...state,\r\n                      viewPost: editComment(state.viewPost,pl)\r\n                  }    \r\n\r\n               case CHANGE_POSTIT_PROPS:\r\n                   return {\r\n                       ...state,\r\n                       postIt: changePostIt(state.postIt,pl)\r\n                   } \r\n                   \r\n               case RESET_POSTIT:\r\n                   return {\r\n                       ...state,\r\n                       postIt: resetPostItProperties()\r\n                   } \r\n                   \r\n           default: \r\n                return state;        \r\n     }\r\n }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}