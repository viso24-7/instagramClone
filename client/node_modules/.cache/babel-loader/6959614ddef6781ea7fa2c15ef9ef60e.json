{"ast":null,"code":"var _jsxFileName = \"C:\\\\JavascriptProjects3\\\\instagramClone\\\\client\\\\src\\\\components\\\\messages\\\\conversation\\\\conversation.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport classNames from 'classnames';\nimport { FadeIn } from 'animate-components';\nimport { getConversationMessages, readConversation, getConDetails } from '../../../actions/message';\nimport { cLoading } from '../../../utils/utils';\nimport { messageScroll } from '../../../utils/message-utils';\nimport d from '../../../utils/api/Dom';\nimport IsLoading from '../../others/isLoading';\nimport MapMessages from './message/map-messages';\nimport TextMessage from './bottom/text-message';\nimport ConversationTop from './top/conver-top';\nimport { number, func, shape } from 'prop-types';\n\nclass Conversation extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loading: true\n    };\n\n    this.componentWillReceiveProps = async ({\n      dispatch,\n      con: nextPropsCon\n    }) => {\n      let {\n        con_id,\n        unreadMssgs\n      } = nextPropsCon;\n      let {\n        con\n      } = this.props;\n\n      if (con_id != con.con_id) {\n        new d('.send_mssg').focus();\n        dispatch(getConDetails(con_id));\n        dispatch(getConversationMessages(con_id));\n        dispatch(readConversation(con_id, unreadMssgs));\n      }\n\n      this.setState({\n        loading: false\n      });\n    };\n\n    this.componentDidMount = () => {\n      let {\n        con: {\n          con_id,\n          unreadMssgs\n        },\n        dispatch\n      } = this.props;\n      dispatch(getConDetails(con_id));\n      dispatch(getConversationMessages(con_id));\n      dispatch(readConversation(con_id, unreadMssgs));\n      messageScroll();\n    };\n\n    this.componentDidUpdate = () => messageScroll();\n  }\n\n  render() {\n    let {\n      loading\n    } = this.state;\n    let {\n      hideConversation\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 14\n      }\n    }, /*#__PURE__*/React.createElement(IsLoading, {\n      loading: loading,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 18\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: classNames('mssg_messages', cLoading(loading)),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 18\n      }\n    }, /*#__PURE__*/React.createElement(FadeIn, {\n      duration: \"300ms\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 22\n      }\n    }, /*#__PURE__*/React.createElement(ConversationTop, {\n      hideConversation: hideConversation,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 26\n      }\n    }), /*#__PURE__*/React.createElement(MapMessages, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 26\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"m_m_bottom\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 26\n      }\n    }, /*#__PURE__*/React.createElement(TextMessage, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 30\n      }\n    })))));\n  }\n\n}\n\nConversation.propTypes = {\n  con: shape({\n    con_id: number.isRequired,\n    unreadMssgs: number.isRequired\n  }).isRequired,\n  hideConversation: func.isRequired\n};\nexport default connect()(Conversation);\nexport { Conversation as PureConversation };","map":{"version":3,"sources":["C:/JavascriptProjects3/instagramClone/client/src/components/messages/conversation/conversation.js"],"names":["React","Component","connect","classNames","FadeIn","getConversationMessages","readConversation","getConDetails","cLoading","messageScroll","d","IsLoading","MapMessages","TextMessage","ConversationTop","number","func","shape","Conversation","state","loading","componentWillReceiveProps","dispatch","con","nextPropsCon","con_id","unreadMssgs","props","focus","setState","componentDidMount","componentDidUpdate","render","hideConversation","propTypes","isRequired","PureConversation"],"mappings":"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","sourcesContent":[" import React,{Component} from 'react';\r\n import {connect} from 'react-redux';\r\n import classNames from 'classnames';\r\n import {FadeIn} from 'animate-components';\r\n import {getConversationMessages,readConversation,getConDetails} from '../../../actions/message';\r\n import {cLoading} from '../../../utils/utils';\r\n import {messageScroll} from '../../../utils/message-utils';\r\n import d from '../../../utils/api/Dom';\r\n import IsLoading from '../../others/isLoading';\r\n import MapMessages from './message/map-messages';\r\n import TextMessage from './bottom/text-message';\r\n import ConversationTop from './top/conver-top';\r\n import {number,func,shape} from 'prop-types';\r\n\r\n class Conversation extends Component {\r\n     state = { loading: true }\r\n\r\n     componentWillReceiveProps = async ({dispatch,con: nextPropsCon}) => {\r\n         let {con_id,unreadMssgs} = nextPropsCon;\r\n         let {con} = this.props;\r\n         if(con_id != con.con_id){\r\n             new d('.send_mssg').focus()\r\n             dispatch(getConDetails(con_id))\r\n             dispatch(getConversationMessages(con_id))\r\n             dispatch(readConversation(con_id,unreadMssgs))\r\n         }\r\n\r\n         this.setState({ loading: false })\r\n     }\r\n\r\n     componentDidMount = () => {\r\n         let {con:{con_id,unreadMssgs},dispatch} = this.props;\r\n         dispatch(getConDetails(con_id))\r\n         dispatch(getConversationMessages(con_id));\r\n         dispatch(readConversation(con_id,unreadMssgs))\r\n         messageScroll()\r\n     }\r\n\r\n     componentDidUpdate = () => messageScroll()\r\n\r\n     render(){\r\n         let {loading} = this.state;\r\n         let {hideConversation} = this.props;\r\n\r\n         return (\r\n             <div>\r\n                 <IsLoading loading={loading} />\r\n\r\n                 <div className={classNames('mssg_messages',cLoading(loading))}>\r\n                     <FadeIn duration=\"300ms\">\r\n                         <ConversationTop hideConversation={hideConversation} />\r\n                         <MapMessages />\r\n\r\n                         <div className=\"m_m_bottom\">\r\n                             <TextMessage />\r\n                         </div>\r\n                     </FadeIn>\r\n                 </div>\r\n             </div>\r\n         )\r\n     }\r\n }\r\n\r\n Conversation.propTypes = {\r\n     con: shape({\r\n         con_id: number.isRequired,\r\n         unreadMssgs: number.isRequired\r\n         }).isRequired,\r\n     hideConversation: func.isRequired    \r\n }\r\n\r\n export default connect()(Conversation);\r\n export {Conversation as PureConversation}"]},"metadata":{},"sourceType":"module"}