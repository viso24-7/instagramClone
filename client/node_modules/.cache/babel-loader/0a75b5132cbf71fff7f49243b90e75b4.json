{"ast":null,"code":"var _jsxFileName = \"C:\\\\JavascriptProjects3\\\\instagramClone\\\\client\\\\src\\\\components\\\\group\\\\group.js\";\nimport React, { Component, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport { FadeIn } from 'animate-components';\nimport { getUnreadNotifications } from '../../actions/notification';\nimport { getUnreadMessages } from '../../actions/message';\nimport { forGroup, Me, cLoading } from '../../utils/utils';\nimport { isAdmin } from '../../utils/admin-utils';\nimport Title from '../others/title';\nimport IsLoading from '../others/isLoading';\nimport Nothing from '../others/nothing';\nimport GroupNav from './group-nav';\nimport GroupBanner from './group-banner';\nimport GroupRoutes from './group-routes';\n\nclass Group extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loading: true\n    };\n\n    this.group_url = () => this.props.history.push('/error/group');\n\n    this.componentWillReceiveProps = ({\n      dispatch,\n      match\n    }) => {\n      if (this.props.match.url != match.url) {\n        forGroup({\n          group_id: match.params.group_id,\n          dispatch,\n          invalidGroup: this.group_url\n        });\n      }\n\n      this.setState({\n        loading: false\n      });\n    };\n\n    this.componentDidMount = () => {\n      let {\n        match: {\n          params: {\n            group_id\n          }\n        },\n        dispatch\n      } = this.props;\n      forGroup({\n        group_id,\n        dispatch,\n        invalidGroup: this.group_url\n      });\n      dispatch(getUnreadNotifications());\n      dispatch(getUnreadMessages());\n    };\n  }\n\n  render() {\n    let {\n      loading\n    } = this.state;\n    let {\n      page,\n      group_details: {\n        name,\n        admin,\n        group_type\n      },\n      joined,\n      match: {\n        url,\n        params: {\n          group_id\n        }\n      }\n    } = this.props;\n    let showContent = Me(admin) || group_type == 'public' || joined || isAdmin();\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 12\n      }\n    }, /*#__PURE__*/React.createElement(Title, {\n      value: name,\n      desc: `View ${name}'s posts,members and much more..`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 16\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"groupDeatils\",\n      \"data-group-id\": group_id,\n      \"data-group-name\": name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 16\n      }\n    }, /*#__PURE__*/React.createElement(IsLoading, {\n      loading: loading,\n      when: page,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 20\n      }\n    }), /*#__PURE__*/React.createElement(FadeIn, {\n      duration: \"300ms\",\n      className: cLoading(loading),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 20\n      }\n    }, /*#__PURE__*/React.createElement(GroupBanner, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 23\n      }\n    }), showContent ? /*#__PURE__*/React.createElement(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 27\n      }\n    }, /*#__PURE__*/React.createElement(GroupNav, {\n      url: url,\n      admin: admin,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 31\n      }\n    }), /*#__PURE__*/React.createElement(GroupRoutes, {\n      url: url,\n      group_id: group_id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 31\n      }\n    })) : /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        marginTop: 85\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 27\n      }\n    }, /*#__PURE__*/React.createElement(Nothing, {\n      message: `${name} group is private.Join to connect`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 31\n      }\n    })))));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  group_details: state.Group.group_details,\n  joined: state.Group.joined\n});\n\nexport default connect(mapStateToProps)(Group);\nexport { Group as PureGroup };","map":{"version":3,"sources":["C:/JavascriptProjects3/instagramClone/client/src/components/group/group.js"],"names":["React","Component","Fragment","connect","FadeIn","getUnreadNotifications","getUnreadMessages","forGroup","Me","cLoading","isAdmin","Title","IsLoading","Nothing","GroupNav","GroupBanner","GroupRoutes","Group","state","loading","group_url","props","history","push","componentWillReceiveProps","dispatch","match","url","group_id","params","invalidGroup","setState","componentDidMount","render","page","group_details","name","admin","group_type","joined","showContent","marginTop","mapStateToProps","PureGroup"],"mappings":"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","sourcesContent":[" import React,{Component,Fragment} from 'react';\r\n import {connect} from 'react-redux';\r\n import {FadeIn} from 'animate-components';\r\n import {getUnreadNotifications} from '../../actions/notification';\r\n import {getUnreadMessages} from '../../actions/message';\r\n import {forGroup,Me,cLoading} from '../../utils/utils';\r\n import {isAdmin} from '../../utils/admin-utils';\r\n import Title from '../others/title';\r\n import IsLoading from '../others/isLoading';\r\n import Nothing from '../others/nothing';\r\n import GroupNav from './group-nav';\r\n import GroupBanner from './group-banner';\r\n import GroupRoutes from './group-routes';\r\n\r\n class Group extends Component {\r\n    state = {loading: true }\r\n\r\n    group_url = () => this.props.history.push('/error/group');\r\n\r\n    //A match object contains information about how a <Route path> matched the URL.A match objects contain the following\r\n    // properties: params,isExact,url,path.To access group_id props used on our cases(in <Route /> )as we put group_id\r\n    // in some routes make available accross this.props.match.params.id\r\n    componentWillReceiveProps = ({dispatch,match}) => {\r\n        if(this.props.match.url != match.url){\r\n            forGroup({\r\n                group_id: match.params.group_id,\r\n                dispatch,\r\n                invalidGroup: this.group_url\r\n            })\r\n        }\r\n        this.setState({ loading: false })\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        let {match:{params: {group_id}},dispatch} = this.props;\r\n        forGroup({\r\n            group_id,\r\n            dispatch,\r\n            invalidGroup: this.group_url\r\n        })\r\n        dispatch(getUnreadNotifications())\r\n        dispatch(getUnreadMessages())\r\n    }\r\n\r\n    render(){\r\n       let {loading} = this.state;\r\n       let {page,group_details:{name,admin,group_type},joined,match:{url,params:{group_id}}} = this.props;\r\n       let showContent = Me(admin) || group_type == 'public' || joined || isAdmin()\r\n\r\n       return (\r\n           <div>\r\n               <Title value={name} desc={`View ${name}'s posts,members and much more..`} />\r\n\r\n               <div className=\"groupDeatils\" data-group-id={group_id} data-group-name={name}>\r\n                   <IsLoading loading={loading} when={page} />\r\n\r\n                   <FadeIn duration=\"300ms\" className={cLoading(loading)}>\r\n                      <GroupBanner />\r\n                      {showContent ? (\r\n                          <Fragment>\r\n                              <GroupNav url={url} admin={admin} />\r\n                              <GroupRoutes url={url} group_id={group_id} />\r\n                          </Fragment>\r\n                      ) : (\r\n                          <div style={{ marginTop: 85 }}>\r\n                              <Nothing message={`${name} group is private.Join to connect`} />\r\n                          </div>\r\n                      )}\r\n                   </FadeIn>\r\n               </div>\r\n           </div>\r\n       )\r\n    } \r\n } \r\n\r\n const mapStateToProps = state => ({\r\n     group_details: state.Group.group_details,\r\n     joined: state.Group.joined\r\n })\r\n\r\n export default connect(mapStateToProps)(Group);\r\n export {Group as PureGroup}"]},"metadata":{},"sourceType":"module"}