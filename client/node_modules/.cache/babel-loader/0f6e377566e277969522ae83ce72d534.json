{"ast":null,"code":"import React,{Fragment}from'react';import{connect}from'react-redux';import{FadeIn}from'animate-components';import{humanReadable}from'../../../utils/utils';import d from'../../../utils/api/Dom';import Nothing from'../../others/nothing';import ConversationTeaser from'./conversation-teaser';var MapConversations=function MapConversations(_ref){var showConversation=_ref.showConversation,conversations=_ref.conversations;var selcetConversation=function selcetConversation(con){new d('.mssg_sr').removeClass('mssg_sr_toggle');new d(\".mt_\".concat(con.con_id)).addClass('mssg_sr_toggle');showConversation(con);};var conlen=conversations.lengthl;var map_conv=conversations.map(function(c){return/*#__PURE__*/React.createElement(ConversationTeaser,Object.assign({key:c.con_id},c,{select:function select(){return selcetConversation({con_id:c.con_id,unreadMssgs:c.unreadMssgs});}}));});return/*#__PURE__*/React.createElement(Fragment,null,/*#__PURE__*/React.createElement(\"span\",{className:\"con_count\"},humanReadable(conlen,'conversation')),conlen===0?/*#__PURE__*/React.createElement(Nothing,{conPage:true,message:\"No conversation\"}):/*#__PURE__*/React.createElement(FadeIn,{duration:\"300ms\"},map_conv));};var mapStateToProps=function mapStateToProps(state){return{conversations:state.Message.conversations};};export default connect(mapStateToProps)(MapConversations);export{MapConversations as PureMapConversations};","map":{"version":3,"sources":["C:/JavascriptProjects3/instagramClone/client/src/components/messages/map-conversations/map-conversations.js"],"names":["React","Fragment","connect","FadeIn","humanReadable","d","Nothing","ConversationTeaser","MapConversations","showConversation","conversations","selcetConversation","con","removeClass","con_id","addClass","conlen","lengthl","map_conv","map","c","unreadMssgs","mapStateToProps","state","Message","PureMapConversations"],"mappings":"AAAC,MAAOA,CAAAA,KAAP,EAAcC,QAAd,KAA6B,OAA7B,CACA,OAAQC,OAAR,KAAsB,aAAtB,CACA,OAAQC,MAAR,KAAqB,oBAArB,CACA,OAAQC,aAAR,KAA4B,sBAA5B,CACA,MAAOC,CAAAA,CAAP,KAAc,wBAAd,CACA,MAAOC,CAAAA,OAAP,KAAoB,sBAApB,CACA,MAAOC,CAAAA,kBAAP,KAA+B,uBAA/B,CAGA,GAAMC,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,MAAsC,IAApCC,CAAAA,gBAAoC,MAApCA,gBAAoC,CAAnBC,aAAmB,MAAnBA,aAAmB,CAC3D,GAAIC,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAAAC,GAAG,CAAI,CAC5B,GAAIP,CAAAA,CAAJ,CAAM,UAAN,EAAkBQ,WAAlB,CAA8B,gBAA9B,EACA,GAAIR,CAAAA,CAAJ,eAAaO,GAAG,CAACE,MAAjB,GAA2BC,QAA3B,CAAoC,gBAApC,EACAN,gBAAgB,CAACG,GAAD,CAAhB,CACH,CAJD,CAMF,GAAII,CAAAA,MAAM,CAAGN,aAAa,CAACO,OAA3B,CACA,GAAIC,CAAAA,QAAQ,CAAGR,aAAa,CAACS,GAAd,CAAkB,SAAAC,CAAC,qBAC9B,oBAAC,kBAAD,gBACG,GAAG,CAAEA,CAAC,CAACN,MADV,EAEOM,CAFP,EAGG,MAAM,CAAE,wBAAMT,CAAAA,kBAAkB,CAAC,CAC7BG,MAAM,CAAEM,CAAC,CAACN,MADmB,CAE7BO,WAAW,CAAED,CAAC,CAACC,WAFc,CAAD,CAAxB,EAHX,GAD8B,EAAnB,CAAf,CAWA,mBACI,oBAAC,QAAD,mBACI,4BAAM,SAAS,CAAC,WAAhB,EAA6BjB,aAAa,CAACY,MAAD,CAAQ,cAAR,CAA1C,CADJ,CAEKA,MAAM,GAAK,CAAX,cACG,oBAAC,OAAD,EAAS,OAAO,KAAhB,CAAiB,OAAO,CAAC,iBAAzB,EADH,cAGG,oBAAC,MAAD,EAAQ,QAAQ,CAAC,OAAjB,EAA0BE,QAA1B,CALR,CADJ,CAUD,CA7BD,CAmCA,GAAMI,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAAAC,KAAK,QAAK,CAC9Bb,aAAa,CAAEa,KAAK,CAACC,OAAN,CAAcd,aADC,CAAL,EAA7B,CAIA,cAAeR,CAAAA,OAAO,CAACoB,eAAD,CAAP,CAAyBd,gBAAzB,CAAf,CACA,OAAQA,gBAAgB,GAAIiB,CAAAA,oBAA5B","sourcesContent":[" import React,{Fragment} from 'react';\r\n import {connect} from 'react-redux';\r\n import {FadeIn} from 'animate-components';\r\n import {humanReadable} from '../../../utils/utils';\r\n import d from '../../../utils/api/Dom';\r\n import Nothing from '../../others/nothing';\r\n import ConversationTeaser from './conversation-teaser';\r\n import {func} from 'prop-types';\r\n\r\n const MapConversations = ({showConversation,conversations}) => {\r\n     let selcetConversation = con => {\r\n         new d('.mssg_sr').removeClass('mssg_sr_toggle')\r\n         new d(`.mt_${con.con_id}`).addClass('mssg_sr_toggle')\r\n         showConversation(con)\r\n     }\r\n\r\n   let conlen = conversations.lengthl\r\n   let map_conv = conversations.map(c => (\r\n       <ConversationTeaser\r\n          key={c.con_id}\r\n          {...c}\r\n          select={() => selcetConversation({\r\n              con_id: c.con_id,\r\n              unreadMssgs: c.unreadMssgs\r\n          })}\r\n       />\r\n   ))\r\n   \r\n   return (\r\n       <Fragment>\r\n           <span className=\"con_count\">{humanReadable(conlen,'conversation')}</span>\r\n           {conlen === 0 ? (\r\n               <Nothing conPage message=\"No conversation\" />\r\n           ) : (\r\n               <FadeIn duration=\"300ms\">{map_conv}</FadeIn>\r\n           )}\r\n       </Fragment>\r\n   )\r\n }\r\n\r\n MapConversations.propTypes = {\r\n    showConversation: func.isRequired\r\n }\r\n\r\n const mapStateToProps = state => ({\r\n     conversations: state.Message.conversations\r\n })\r\n\r\n export default connect(mapStateToProps)(MapConversations);\r\n export {MapConversations as PureMapConversations}"]},"metadata":{},"sourceType":"module"}