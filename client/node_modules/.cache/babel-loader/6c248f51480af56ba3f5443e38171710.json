{"ast":null,"code":"import _regeneratorRuntime from\"C:\\\\JavascriptProjects3\\\\instagramClone\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _objectSpread from\"C:\\\\JavascriptProjects3\\\\instagramClone\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import _asyncToGenerator from\"C:\\\\JavascriptProjects3\\\\instagramClone\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";import{post}from'axios';import{notify}from'../utils/utilMethods/handy-notification';import*as followA from'../actions/follow';import{insta_notify,uData}from'./utils';/**\r\n * Follow user\r\n *\r\n * user, username & done properties must be provided.\r\n *\r\n * Provide update_followers when user's followers data need to be updated.\r\n * Eg. On Banner Comp.\r\n *\r\n * Provide update_followings when user's followings data need to be updated.\r\n * Eg. On Followers Comp.\r\n *\r\n * Provide dispatch when either update_followers OR update_followings needs to be updated\r\n *\r\n * Provide Firstname & Surname when update_followings=true\r\n *\r\n * Provide username as it used for notifying.\r\n *\r\n * @param {Object} options Options for following user\r\n * @param {Number} options.user\r\n * @param {String} options.username\r\n * @param {firstname} options.firstname\r\n * @param {surname} options.surname\r\n * @param {Boolean} options.update_followers\r\n * @param {Boolean} options.update_followings\r\n * @param {Function} options.dispatch\r\n * @param {Function} options.done\r\n */export var follow=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(options){var defaults,obj,user,username,firstname,surname,update_followers,update_followings,dispatch,done,_yield$post,_yield$post$data,success,message,ff,following;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:defaults={user:null,username:null,firstname:null,surname:null,update_followers:false,update_followings:false,dispatch:function dispatch(){return null;},done:function done(){return null;}};obj=_objectSpread(_objectSpread({},defaults),options);user=obj.user,username=obj.username,firstname=obj.firstname,surname=obj.surname,update_followers=obj.update_followers,update_followings=obj.update_followings,dispatch=obj.dispatch,done=obj.done;_context.next=5;return post('/api/follow',{user:user,username:username});case 5:_yield$post=_context.sent;_yield$post$data=_yield$post.data;success=_yield$post$data.success;message=_yield$post$data.message;ff=_yield$post$data.ff;if(success){following={follow_id:ff.follow_id,follow_to:user,follow_by:Number(uData('session')),username:username,firstname:firstname,surname:surname,isFollowing:true,follow_time:ff.follow_time};if(update_followers){dispatch(followA.Follower(ff));}if(update_followings){dispatch(followA.Following(following));}insta_notify({to:user,type:'follow'});done();}notify({value:message});case 12:case\"end\":return _context.stop();}}},_callee);}));return function follow(_x){return _ref.apply(this,arguments);};}();/**\r\n * Unfollow user\r\n *\r\n * user & done properties must be provided.\r\n *\r\n * Provide update_followers when user's followers data need to be updated.\r\n * Eg. On Banner Comp.\r\n *\r\n * Provide update_followings when user's followings data need to be updated.\r\n * Eg. On Followers Comp.\r\n *\r\n * Provide dispatch when either update_followers OR update_followings needs to be updated\r\n *\r\n * @param {Object} options Options for unfollowing user\r\n * @param {Number} options.user\r\n * @param {Boolean} options.update_followers\r\n * @param {Boolean} options.update_followings\r\n * @param {Function} options.dispatch\r\n * @param {Function} options.done\r\n */export var unfollow=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(options){var defaults,obj,user,update_followers,update_followings,dispatch,done,session,_yield$post2,_yield$post2$data,success,message;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:defaults={user:null,update_followers:false,update_followings:false,dispatch:function dispatch(){return null;},done:function done(){return null;}};obj=_objectSpread(_objectSpread({},defaults),options);user=obj.user,update_followers=obj.update_followers,update_followings=obj.update_followings,dispatch=obj.dispatch,done=obj.done;session=uData('session');_context2.next=6;return post('/api/unfollow',{user:user});case 6:_yield$post2=_context2.sent;_yield$post2$data=_yield$post2.data;success=_yield$post2$data.success;message=_yield$post2$data.message;if(success){if(update_followers){dispatch(followA.Unfollower(session));}if(update_followings){dispatch(followA.Unfollowing(user));}done();}notify({value:message});case 12:case\"end\":return _context2.stop();}}},_callee2);}));return function unfollow(_x2){return _ref2.apply(this,arguments);};}();/**\r\n * Add user to favorites\r\n * @param {Number} user User to add to favorites\r\n */export var addToFavourites=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(user){var _yield$post3,_yield$post3$data,success,message;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.next=2;return post('/api/add-to-favourites',{user:user});case 2:_yield$post3=_context3.sent;_yield$post3$data=_yield$post3.data;success=_yield$post3$data.success;message=_yield$post3$data.message;if(success){insta_notify({to:user,type:'Favourites'});}notify({value:message});case 8:case\"end\":return _context3.stop();}}},_callee3);}));return function addToFavourites(_x3){return _ref3.apply(this,arguments);};}();/**\r\n * Recommends a user\r\n * @param {Object} options\r\n * @param {Number} options.recommend_to\r\n * @param {Number} options.user\r\n */export var recommendUser=/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(options){var user,recommend_to,_yield$post4,_yield$post4$data,success,message;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:user=options.user,recommend_to=options.recommend_to;_context4.next=3;return post('/api/recommend-user',{user:user,recommend_to:recommend_to});case 3:_yield$post4=_context4.sent;_yield$post4$data=_yield$post4.data;success=_yield$post4$data.success;message=_yield$post4$data.message;if(success){insta_notify({to:recommend_to,type:'recommend',user:user});}notify({value:message});case 9:case\"end\":return _context4.stop();}}},_callee4);}));return function recommendUser(_x4){return _ref4.apply(this,arguments);};}();","map":{"version":3,"sources":["C:/JavascriptProjects3/instagramClone/client/src/utils/user-interact-utils.js"],"names":["post","notify","followA","insta_notify","uData","follow","options","defaults","user","username","firstname","surname","update_followers","update_followings","dispatch","done","obj","data","success","message","ff","following","follow_id","follow_to","follow_by","Number","isFollowing","follow_time","Follower","Following","to","type","value","unfollow","session","Unfollower","Unfollowing","addToFavourites","recommendUser","recommend_to"],"mappings":"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","sourcesContent":["import {post} from 'axios';\r\nimport {notify} from '../utils/utilMethods/handy-notification';\r\nimport * as followA from '../actions/follow';\r\nimport {insta_notify,uData} from './utils';\r\n\r\n/**\r\n * Follow user\r\n *\r\n * user, username & done properties must be provided.\r\n *\r\n * Provide update_followers when user's followers data need to be updated.\r\n * Eg. On Banner Comp.\r\n *\r\n * Provide update_followings when user's followings data need to be updated.\r\n * Eg. On Followers Comp.\r\n *\r\n * Provide dispatch when either update_followers OR update_followings needs to be updated\r\n *\r\n * Provide Firstname & Surname when update_followings=true\r\n *\r\n * Provide username as it used for notifying.\r\n *\r\n * @param {Object} options Options for following user\r\n * @param {Number} options.user\r\n * @param {String} options.username\r\n * @param {firstname} options.firstname\r\n * @param {surname} options.surname\r\n * @param {Boolean} options.update_followers\r\n * @param {Boolean} options.update_followings\r\n * @param {Function} options.dispatch\r\n * @param {Function} options.done\r\n */\r\n export const follow = async options => {\r\n     let defaults = {\r\n          user: null,\r\n          username: null,\r\n          firstname: null,\r\n          surname: null,\r\n          update_followers: false,\r\n          update_followings: false,\r\n          dispatch: () => null,\r\n          done: () => null\r\n         };\r\n      let obj = {...defaults,...options};\r\n      let {user,username,firstname,surname,update_followers,update_followings,dispatch,done} = obj;\r\n      let {data: {success,message,ff}} = await post('/api/follow',{user,username});\r\n\r\n      if(success){\r\n          let following = {\r\n              follow_id: ff.follow_id,\r\n              follow_to: user,\r\n              follow_by: Number(uData('session')),\r\n              username,\r\n              firstname,\r\n              surname,\r\n              isFollowing: true,\r\n              follow_time: ff.follow_time\r\n            };\r\n\r\n         if(update_followers){ \r\n             dispatch(followA.Follower(ff))\r\n         }\r\n         if(update_followings){\r\n            dispatch(followA.Following(following))\r\n         }\r\n\r\n         insta_notify({\r\n             to: user,\r\n             type: 'follow'\r\n          });\r\n        done();\r\n      }\r\n\r\n   notify({ value: message})   \r\n }\r\n\r\n/**\r\n * Unfollow user\r\n *\r\n * user & done properties must be provided.\r\n *\r\n * Provide update_followers when user's followers data need to be updated.\r\n * Eg. On Banner Comp.\r\n *\r\n * Provide update_followings when user's followings data need to be updated.\r\n * Eg. On Followers Comp.\r\n *\r\n * Provide dispatch when either update_followers OR update_followings needs to be updated\r\n *\r\n * @param {Object} options Options for unfollowing user\r\n * @param {Number} options.user\r\n * @param {Boolean} options.update_followers\r\n * @param {Boolean} options.update_followings\r\n * @param {Function} options.dispatch\r\n * @param {Function} options.done\r\n */\r\n  export const unfollow = async options => {\r\n      let defaults = {\r\n          user: null,\r\n          update_followers: false,\r\n          update_followings: false,\r\n          dispatch: () => null,\r\n          done: () => null\r\n         };\r\n       let obj = {...defaults,...options};\r\n       let {user,update_followers,update_followings,dispatch,done} = obj;\r\n       let session = uData('session');\r\n       let {data: {success,message}} = await post('/api/unfollow',{user});\r\n\r\n       if(success){\r\n           if(update_followers){\r\n               dispatch(followA.Unfollower(session))\r\n           }   \r\n          \r\n           if(update_followings){\r\n              dispatch(followA.Unfollowing(user));\r\n           }  \r\n           done();\r\n       }\r\n\r\n       notify({ value: message})\r\n  }\r\n\r\n/**\r\n * Add user to favorites\r\n * @param {Number} user User to add to favorites\r\n */\r\n export const addToFavourites = async user => {\r\n   let {data: {success,message}} = await post('/api/add-to-favourites',{user});\r\n   if(success){\r\n       insta_notify({\r\n           to: user,\r\n           type: 'Favourites'\r\n       })\r\n   }\r\n\r\n   notify({value: message })\r\n }\r\n\r\n/**\r\n * Recommends a user\r\n * @param {Object} options\r\n * @param {Number} options.recommend_to\r\n * @param {Number} options.user\r\n */\r\n export const recommendUser = async options => {\r\n     let {user,recommend_to} = options;\r\n     let {data: {success,message}} = await post('/api/recommend-user', {user,recommend_to});\r\n\r\n     if(success){\r\n         insta_notify({\r\n             to: recommend_to,\r\n             type: 'recommend',\r\n             user\r\n         })\r\n     }\r\n\r\n   notify({value: message})  \r\n }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}