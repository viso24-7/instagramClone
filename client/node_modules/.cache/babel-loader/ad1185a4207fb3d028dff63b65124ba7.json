{"ast":null,"code":"import React,{Fragment}from'react';import CommentTypeImage from'./type-image';import ToTags from'../../../hashtag/toTags/toTags';var CommentType=function CommentType(_ref){var type=_ref.type,text=_ref.text,commentSrc=_ref.commentSrc;var noComment={fonStyle:'italic',display:'block'};return/*#__PURE__*/React.createElement(Fragment,null,type==='text'&&!text?/*#__PURE__*/React.createElement(\"span\",{style:noComment},\"Empty comment\"):type==='text'?/*#__PURE__*/React.createElement(\"p\",{className:\"ce\"},/*#__PURE__*/React.createElement(ToTags,{str:text})):type==='image'?/*#__PURE__*/React.createElement(CommentTypeImage,{commentSrc:commentSrc}):type==='sticker'?/*#__PURE__*/React.createElement(\"img\",{src:\"/comments/\".concat(commentSrc),className:\"comments_sticker\"}):null);};export default CommentType;","map":{"version":3,"sources":["C:/JavascriptProjects3/instagramClone/client/src/components/post/comment/comments/comment-type.js"],"names":["React","Fragment","CommentTypeImage","ToTags","CommentType","type","text","commentSrc","noComment","fonStyle","display"],"mappings":"AAAC,MAAOA,CAAAA,KAAP,EAAcC,QAAd,KAA6B,OAA7B,CACA,MAAOC,CAAAA,gBAAP,KAA6B,cAA7B,CACA,MAAOC,CAAAA,MAAP,KAAmB,gCAAnB,CAGA,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,MAA4B,IAA1BC,CAAAA,IAA0B,MAA1BA,IAA0B,CAArBC,IAAqB,MAArBA,IAAqB,CAAhBC,UAAgB,MAAhBA,UAAgB,CAC5C,GAAIC,CAAAA,SAAS,CAAG,CACZC,QAAQ,CAAE,QADE,CAEZC,OAAO,CAAE,OAFG,CAAhB,CAKA,mBACI,oBAAC,QAAD,MACKL,IAAI,GAAK,MAAT,EAAmB,CAACC,IAApB,cACG,4BAAM,KAAK,CAAEE,SAAb,kBADH,CAEGH,IAAI,GAAK,MAAT,cACA,yBAAG,SAAS,CAAC,IAAb,eACI,oBAAC,MAAD,EAAQ,GAAG,CAAEC,IAAb,EADJ,CADA,CAIAD,IAAI,GAAK,OAAT,cACA,oBAAC,gBAAD,EAAkB,UAAU,CAAEE,UAA9B,EADA,CAEAF,IAAI,GAAK,SAAT,cACA,2BAAK,GAAG,qBAAeE,UAAf,CAAR,CAAqC,SAAS,CAAC,kBAA/C,EADA,CAEA,IAXR,CADJ,CAeH,CArBD,CA4BA,cAAeH,CAAAA,WAAf","sourcesContent":[" import React,{Fragment} from 'react';\r\n import CommentTypeImage from './type-image';\r\n import ToTags from '../../../hashtag/toTags/toTags';\r\n import {string,oneOf} from 'prop-types';\r\n\r\n const CommentType = ({type,text,commentSrc}) => {\r\n     let noComment = {\r\n         fonStyle: 'italic',\r\n         display: 'block'\r\n     }\r\n\r\n     return (\r\n         <Fragment>\r\n             {type === 'text' && !text ? (\r\n                 <span style={noComment}>Empty comment</span>\r\n             ) : type === 'text' ? (\r\n                 <p className=\"ce\">\r\n                     <ToTags str={text} />\r\n                 </p>\r\n             ) : type === 'image' ? (\r\n                 <CommentTypeImage commentSrc={commentSrc} />\r\n             ) : type === 'sticker' ? (\r\n                 <img src={`/comments/${commentSrc}`} className=\"comments_sticker\" />\r\n             ) : null }\r\n         </Fragment>\r\n     )\r\n }\r\n\r\n CommentType.propTypes = {\r\n     type: oneOf(['text','image','sticker','']).isRequired,\r\n     text: string,\r\n     commentSrc: string\r\n }\r\n export default CommentType;"]},"metadata":{},"sourceType":"module"}