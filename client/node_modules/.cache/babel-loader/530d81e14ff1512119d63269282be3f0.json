{"ast":null,"code":"export const timeAgo = Time => {\n  let time = parseInt(Time);\n\n  switch (typeof time) {\n    case 'number':\n      break;\n\n    case 'string':\n      time = +new Date(time);\n      break;\n\n    case 'object':\n      if (time.constructor === Date) time = time.getTime();\n      break;\n\n    default:\n      time = +new Date();\n  }\n\n  let time_formats = [[60, 'secs', 1], // 60\n  [120, '1 min ago', '1 min from now'], // 60*2\n  [3600, 'mins', 60], // 60*60, 60\n  [7200, '1 hour ago', '1 hour from now'], // 60*60*2\n  [86400, 'hours', 3600], // 60*60*24, 60*60\n  [172800, 'Yesterday', 'Tomorrow'], // 60*60*24*2\n  [604800, 'days', 86400], // 60*60*24*7, 60*60*24\n  [1209600, 'Last week', 'Next week'], // 60*60*24*7*4*2\n  [2419200, 'weeks', 604800], // 60*60*24*7*4, 60*60*24*7\n  [4838400, 'Last month', 'Next month'], // 60*60*24*7*4*2\n  [29030400, 'months', 2419200], // 60*60*24*7*4*12, 60*60*24*7*4\n  [58060800, 'Last year', 'Next year'], // 60*60*24*7*4*12*2\n  [2903040000, 'years', 29030400], // 60*60*24*7*4*12*100, 60*60*24*7*4*12\n  [5806080000, 'Last century', 'Next century'], // 60*60*24*7*4*12*100*2\n  [58060800000, 'centuries', 2903040000] // 60*60*24*7*4*12*100*20, 60*60*24*7*4*12*100\n  ];\n  let seconds = (+new Date() - time) / 1000;\n  let token = 'ago';\n  let list_choice = 1;\n\n  if (seconds == 0) {\n    return \"Just now\";\n  }\n\n  if (seconds < 0) {\n    seconds = Math.abs(seconds);\n    token = 'from now';\n    list_choice = 2;\n  }\n\n  let i = 0,\n      format;\n\n  while (format = time_formats[i++]) //format will loop over time_formats,if new Date - time/1000 < than 60 sec\n  if (seconds < format[0]) {\n    if (typeof format[2] == 'string') return format[list_choice]; //means is 1 hours\n    else return Math.floor(seconds / format[2]) + ' ' + format[1] + ' ' + token;\n  }\n\n  return time;\n};","map":{"version":3,"sources":["C:/JavascriptProjects3/instagramClone/client/src/utils/utilMethods/handyTimeAgo.js"],"names":["timeAgo","Time","time","parseInt","Date","constructor","getTime","time_formats","seconds","token","list_choice","Math","abs","i","format","floor"],"mappings":"AAAA,OAAO,MAAMA,OAAO,GAAGC,IAAI,IAAI;AAC3B,MAAIC,IAAI,GAAGC,QAAQ,CAACF,IAAD,CAAnB;;AAEA,UAAQ,OAAOC,IAAf;AACE,SAAK,QAAL;AACE;;AACF,SAAK,QAAL;AACEA,MAAAA,IAAI,GAAG,CAAC,IAAIE,IAAJ,CAASF,IAAT,CAAR;AACA;;AACF,SAAK,QAAL;AACE,UAAIA,IAAI,CAACG,WAAL,KAAqBD,IAAzB,EAA+BF,IAAI,GAAGA,IAAI,CAACI,OAAL,EAAP;AAC/B;;AACF;AACEJ,MAAAA,IAAI,GAAG,CAAC,IAAIE,IAAJ,EAAR;AAVJ;;AAaA,MAAIG,YAAY,GAAG,CACjB,CAAC,EAAD,EAAK,MAAL,EAAa,CAAb,CADiB,EAC+B;AAChD,GAAC,GAAD,EAAM,WAAN,EAAmB,gBAAnB,CAFiB,EAE+B;AAChD,GAAC,IAAD,EAAO,MAAP,EAAe,EAAf,CAHiB,EAG+B;AAChD,GAAC,IAAD,EAAO,YAAP,EAAqB,iBAArB,CAJiB,EAI+B;AAChD,GAAC,KAAD,EAAQ,OAAR,EAAiB,IAAjB,CALiB,EAK+B;AAChD,GAAC,MAAD,EAAS,WAAT,EAAsB,UAAtB,CANiB,EAM+B;AAChD,GAAC,MAAD,EAAS,MAAT,EAAiB,KAAjB,CAPiB,EAO+B;AAChD,GAAC,OAAD,EAAU,WAAV,EAAuB,WAAvB,CARiB,EAQ+B;AAChD,GAAC,OAAD,EAAU,OAAV,EAAmB,MAAnB,CATiB,EAS+B;AAChD,GAAC,OAAD,EAAU,YAAV,EAAwB,YAAxB,CAViB,EAU+B;AAChD,GAAC,QAAD,EAAW,QAAX,EAAqB,OAArB,CAXiB,EAW+B;AAChD,GAAC,QAAD,EAAW,WAAX,EAAwB,WAAxB,CAZiB,EAY+B;AAChD,GAAC,UAAD,EAAa,OAAb,EAAsB,QAAtB,CAbiB,EAa+B;AAChD,GAAC,UAAD,EAAa,cAAb,EAA6B,cAA7B,CAdiB,EAc+B;AAChD,GAAC,WAAD,EAAc,WAAd,EAA2B,UAA3B,CAfiB,CAe+B;AAf/B,GAAnB;AAkBA,MAAIC,OAAO,GAAG,CAAC,CAAC,IAAIJ,IAAJ,EAAD,GAAcF,IAAf,IAAuB,IAArC;AACA,MAAIO,KAAK,GAAG,KAAZ;AACA,MAAIC,WAAW,GAAG,CAAlB;;AAEA,MAAGF,OAAO,IAAI,CAAd,EAAgB;AAAG,WAAO,UAAP;AAAmB;;AAEtC,MAAIA,OAAO,GAAG,CAAd,EAAiB;AACfA,IAAAA,OAAO,GAAGG,IAAI,CAACC,GAAL,CAASJ,OAAT,CAAV;AACAC,IAAAA,KAAK,GAAG,UAAR;AACAC,IAAAA,WAAW,GAAG,CAAd;AACD;;AAED,MAAIG,CAAC,GAAG,CAAR;AAAA,MAAWC,MAAX;;AACA,SAAOA,MAAM,GAAGP,YAAY,CAACM,CAAC,EAAF,CAA5B,EAAoC;AAClC,MAAIL,OAAO,GAAGM,MAAM,CAAC,CAAD,CAApB,EAAyB;AACvB,QAAI,OAAOA,MAAM,CAAC,CAAD,CAAb,IAAoB,QAAxB,EAAkC,OAAOA,MAAM,CAACJ,WAAD,CAAb,CAAlC,CAA8D;AAA9D,SACK,OAAOC,IAAI,CAACI,KAAL,CAAWP,OAAO,GAAGM,MAAM,CAAC,CAAD,CAA3B,IAAkC,GAAlC,GAAwCA,MAAM,CAAC,CAAD,CAA9C,GAAoD,GAApD,GAA0DL,KAAjE;AACN;;AAEH,SAAOP,IAAP;AACD,CAtDI","sourcesContent":["export const timeAgo = Time => {\r\n    let time = parseInt(Time)\r\n  \r\n    switch (typeof time) {\r\n      case 'number':\r\n        break\r\n      case 'string':\r\n        time = +new Date(time)\r\n        break\r\n      case 'object':\r\n        if (time.constructor === Date) time = time.getTime()\r\n        break\r\n      default:\r\n        time = +new Date()\r\n    }\r\n  \r\n    let time_formats = [\r\n      [60, 'secs', 1],                                // 60\r\n      [120, '1 min ago', '1 min from now'],           // 60*2\r\n      [3600, 'mins', 60],                             // 60*60, 60\r\n      [7200, '1 hour ago', '1 hour from now'],        // 60*60*2\r\n      [86400, 'hours', 3600],                         // 60*60*24, 60*60\r\n      [172800, 'Yesterday', 'Tomorrow'],              // 60*60*24*2\r\n      [604800, 'days', 86400],                        // 60*60*24*7, 60*60*24\r\n      [1209600, 'Last week', 'Next week'],            // 60*60*24*7*4*2\r\n      [2419200, 'weeks', 604800],                     // 60*60*24*7*4, 60*60*24*7\r\n      [4838400, 'Last month', 'Next month'],          // 60*60*24*7*4*2\r\n      [29030400, 'months', 2419200],                  // 60*60*24*7*4*12, 60*60*24*7*4\r\n      [58060800, 'Last year', 'Next year'],           // 60*60*24*7*4*12*2\r\n      [2903040000, 'years', 29030400],                // 60*60*24*7*4*12*100, 60*60*24*7*4*12\r\n      [5806080000, 'Last century', 'Next century'],   // 60*60*24*7*4*12*100*2\r\n      [58060800000, 'centuries', 2903040000]          // 60*60*24*7*4*12*100*20, 60*60*24*7*4*12*100\r\n    ]\r\n  \r\n    let seconds = (+new Date() - time) / 1000;\r\n    let token = 'ago';\r\n    let list_choice = 1\r\n    \r\n    if(seconds == 0){  return \"Just now\" }\r\n  \r\n    if (seconds < 0) {\r\n      seconds = Math.abs(seconds)\r\n      token = 'from now'\r\n      list_choice = 2\r\n    }\r\n  \r\n    let i = 0, format\r\n    while (format = time_formats[i++])  //format will loop over time_formats,if new Date - time/1000 < than 60 sec\r\n      if (seconds < format[0]) {\r\n        if (typeof format[2] == 'string') return format[list_choice]  //means is 1 hours\r\n        else return Math.floor(seconds / format[2]) + ' ' + format[1] + ' ' + token\r\n      }\r\n  \r\n    return time;  \r\n  }\r\n  "]},"metadata":{},"sourceType":"module"}