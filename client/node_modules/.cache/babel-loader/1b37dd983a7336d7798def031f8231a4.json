{"ast":null,"code":"import { toggle } from '../';\n\nclass Dom {\n  //Get element as a string\n  constructor(_element) {\n    this.element = '';\n\n    this.toDom = () => {\n      let element = document.querySelector(this.element);\n      return element ? element : null;\n    };\n\n    this.toAll = () => document.querySelectorAll(this.element);\n\n    this.ifElement = fn => {\n      let element = this.toDom();\n      return element ? fn() : null;\n    };\n\n    this.focus = () => {\n      this.ifElement(() => this.toDom().focus());\n      return this;\n    };\n\n    this.blur = () => {\n      this.ifElement(() => this.toDom().blur());\n      return this;\n    };\n\n    this.text = t => {\n      this.ifElement(() => this.toDom().innerText = t);\n      return this;\n    };\n\n    this.html = body => {\n      this.ifElement(() => this.toDom().innerHTML = body);\n      return this;\n    };\n\n    this.doWhat = (operation, className) => {\n      let all = Array.from(document.querySelectorAll(this.element));\n\n      for (let elem of all) {\n        //I use classList API to remove and add classes\n        elem.classList[operation](className);\n      }\n    };\n\n    this.addClass = className => {\n      this.ifElement(() => this.doWhat('add', className));\n      return this;\n    };\n\n    this.removeClass = className => {\n      this.ifElement(() => this.doWhat('remove', className));\n      return this;\n    };\n\n    this.toggleClass = className => {\n      this.ifElement(() => this.toDom().classList.toggle(className));\n      return this;\n    };\n\n    this.getAttr = attr => {\n      let el = this.toDom();\n      return el ? el.getAttribute(attr) : null;\n    };\n\n    this.setAttr = (name, value) => {\n      this.ifElement(() => this.toDom().setAttribute(name, value));\n      return this;\n    };\n\n    this.toggle = () => {\n      this.ifElement(() => this.toDom().style.display = 'none');\n      return this;\n    };\n\n    this.hide = () => {\n      this.ifElement(() => this.toDom().style.display = 'none');\n      return this;\n    };\n\n    this.show = () => {\n      this.ifElement(() => this.toDom().style.display = 'block');\n      return this;\n    };\n\n    this.css = (styleName, styleValue) => {\n      this.ifElement(() => this.toDom().style[styleName] = styleValue);\n      return this;\n    };\n\n    this.multipleCss = styles => {\n      //assign(target, source) target in our case is element when will put all styles\n      this.ifElement(() => Object.assign(this.toDom(), styles));\n      return this;\n    };\n\n    this.val = () => {\n      let value = this.toDom().value;\n      return value;\n    };\n\n    this.setValue = value => {\n      this.ifElement(() => this.toDom().value = value);\n      return this;\n    };\n\n    this.on = (actionType, fn) => {\n      this.ifElement(() => {\n        let element = this.toDom();\n        element.addEventListener(actionType, e => fn(e));\n      });\n      return this;\n    };\n\n    this.scrollTop = (behavior = 'smooth') => {\n      this.ifElement(() => this.toDom().scrollIntoView({\n        behavior: behavior\n      }));\n      return this;\n    };\n\n    this.fade = () => {\n      this.toggleClass('fade');\n      return this;\n    };\n\n    this.remove = () => {\n      this.ifElement(() => this.toDom().remove());\n      return this;\n    };\n\n    this.data = what => {\n      let element = this.toDom();\n      return element ? element.dataset[what] : null;\n    };\n\n    this.element = _element;\n  } //Converts element into a Dom element \n\n\n}\n\nconst d = Dom;\nexport default d;","map":{"version":3,"sources":["C:/JavascriptProjects3/instagramClone/client/src/utils/api/Dom.js"],"names":["toggle","Dom","constructor","element","toDom","document","querySelector","toAll","querySelectorAll","ifElement","fn","focus","blur","text","t","innerText","html","body","innerHTML","doWhat","operation","className","all","Array","from","elem","classList","addClass","removeClass","toggleClass","getAttr","attr","el","getAttribute","setAttr","name","value","setAttribute","style","display","hide","show","css","styleName","styleValue","multipleCss","styles","Object","assign","val","setValue","on","actionType","addEventListener","e","scrollTop","behavior","scrollIntoView","fade","remove","data","what","dataset","d"],"mappings":"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","sourcesContent":["import {toggle} from '../';\r\n\r\n class Dom {\r\n     element = '';\r\n\r\n     //Get element as a string\r\n     constructor(element){\r\n         this.element = element;\r\n     }\r\n\r\n     //Converts element into a Dom element \r\n     toDom = () => {\r\n         let element = document.querySelector(this.element);\r\n         return element ? element : null;\r\n     }\r\n\r\n     //Returns all DOM elements\r\n     toAll = () =>  document.querySelectorAll(this.element);\r\n\r\n    //Perform a function/method on element only if is not null/present\r\n    ifElement = fn => {\r\n      let element = this.toDom();\r\n      return  element ? fn() : null\r\n    } \r\n\r\n    //Focuses the element\r\n    focus = () => {\r\n        this.ifElement(() => this.toDom().focus());\r\n        return this;\r\n    }\r\n\r\n    //Blurs the element,blur() method is used to remove focus from an element.\r\n    blur = () => {\r\n        this.ifElement(() => this.toDom().blur());\r\n        return this;\r\n    }\r\n\r\n    //Changes the text of element\r\n     text = t => {\r\n         this.ifElement(() => (this.toDom().innerText = t));\r\n         return this;\r\n     }\r\n\r\n    //Changes the html of element\r\n    html = body => {\r\n        this.ifElement(() => (this.toDom().innerHTML = body));\r\n        return this;\r\n    }\r\n\r\n    //Helper for adding or removing class\r\n    doWhat = (operation,className) => {\r\n        let all = Array.from(document.querySelectorAll(this.element));\r\n        for(let elem of all){ //I use classList API to remove and add classes\r\n            elem.classList[operation](className)\r\n        }        \r\n    }\r\n\r\n    //Adds a class to element\r\n    addClass = className => {\r\n        this.ifElement(() => this.doWhat('add',className));\r\n        return this;\r\n    } \r\n\r\n    //Remove a class from the element\r\n    removeClass = className => {\r\n        this.ifElement(() => this.doWhat('remove',className));\r\n        return this;\r\n    }\r\n\r\n    //Toggle class of the element\r\n    toggleClass = className => {\r\n        this.ifElement(() => this.toDom().classList.toggle(className));\r\n        return this;\r\n    }\r\n    \r\n    //Returns the attribute of the element\r\n    getAttr = attr => {\r\n        let el = this.toDom();\r\n        return el ? el.getAttribute(attr) : null;\r\n    }\r\n\r\n    //Sets/Changes attribute of the element\r\n    setAttr = (name,value) => {\r\n        this.ifElement(() => this.toDom().setAttribute(name,value));\r\n        return this;\r\n    }\r\n\r\n    //toggle(hide/show) element\r\n    toggle = () => {\r\n        this.ifElement(() => (this.toDom().style.display = 'none'));\r\n        return this;\r\n    }\r\n\r\n    //Hides the element\r\n    hide = () => {\r\n        this.ifElement(() => (this.toDom().style.display = 'none'));\r\n        return this;\r\n    } \r\n\r\n    //Show the element\r\n    show = () => {\r\n        this.ifElement(() => (this.toDom().style.display = 'block'));\r\n        return this;\r\n    } \r\n\r\n    //Applies css to the element\r\n    css = (styleName,styleValue) => {\r\n        this.ifElement(() => (this.toDom().style[styleName] = styleValue));\r\n        return this;\r\n    }\r\n\r\n    //Applies multiple css rules to the element\r\n    multipleCss = styles => {\r\n        //assign(target, source) target in our case is element when will put all styles\r\n        this.ifElement(() => Object.assign(this.toDom(),styles));\r\n        return this;\r\n    }\r\n\r\n    //Return the value of element\r\n    val = () => {\r\n        let value = this.toDom().value;\r\n        return value;\r\n    }\r\n\r\n    //Set the value of element\r\n    setValue = value => {\r\n        this.ifElement(() => (this.toDom().value = value))\r\n        return this\r\n    }\r\n\r\n    //Performs an action on the element such as click,change\r\n    on = (actionType,fn) => {\r\n        this.ifElement(() => {\r\n            let element = this.toDom();\r\n            element.addEventListener(actionType,e => fn(e))\r\n        })\r\n        return this;\r\n    }\r\n\r\n    //Scrolls to top\r\n    scrollTop = (behavior = 'smooth') => {\r\n        this.ifElement(() => this.toDom().scrollIntoView({ behavior: behavior}));\r\n        return this;\r\n    }\r\n\r\n    //Fades(fadeIn/fadeOut => make what is write visible(pop up) o not) the element\r\n    fade = () => {\r\n        this.toggleClass('fade');\r\n        return this;\r\n    }\r\n\r\n    //Remove the element\r\n    remove = () => {\r\n        this.ifElement(() => this.toDom().remove());\r\n        return this;\r\n    }\r\n\r\n    //Return data of the element from dataset\r\n    data = what => {\r\n        let element = this.toDom();\r\n        return element ? element.dataset[what] : null;\r\n    }\r\n }\r\n  \r\n  const d = Dom;\r\n  export default d;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}