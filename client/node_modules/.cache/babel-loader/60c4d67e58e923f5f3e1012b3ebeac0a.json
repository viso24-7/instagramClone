{"ast":null,"code":"import { post } from 'axios';\nimport { addTag } from '../actions/user';\nimport { ObjectMssg, wait } from './utils';\nimport { notify } from '../utils/utilMethods/handy-notification';\nimport Action from './api/Action';\n/**\r\n * Add user tags\r\n * @param {Object} options\r\n * @param {String} options.value\r\n * @param {Number} options.user\r\n * @param {Function} options.dispatch\r\n */\n\nexport const addUserTags = options => {\n  let {\n    value,\n    user,\n    dispatch\n  } = options;\n\n  if (value) {\n    dispatch(addTag({\n      user,\n      tag: value\n    }));\n  } else {\n    notify({\n      value: 'Please enter a tag'\n    });\n  }\n};\n/**\r\n* Edit profile\r\n* @param {Object} options\r\n* @param {String} options.susername\r\n* @param {String} options.semail\r\n* @param {Object} options.values\r\n* @param {String} options.values.username\r\n* @param {String} options.values.email\r\n*/\n\nexport const editProfile = async options => {\n  let {\n    susername,\n    semail,\n    values,\n    values: {\n      username,\n      email\n    }\n  } = options;\n  let {\n    data: uCount\n  } = await post('/api/what-exists', {\n    what: 'username',\n    value: username\n  });\n  let {\n    data: eCount\n  } = await post('/api/what-exists', {\n    what: 'email',\n    value: email\n  });\n  let action = new Action('.edit_done');\n  action.start('Processing ...');\n\n  if (!username) {\n    notify({\n      value: 'Username must not be empty'\n    });\n  } else if (!email) {\n    notify({\n      value: 'Email must not be empty'\n    });\n  } else if (uCount === 1 && username !== susername) {\n    notify({\n      value: 'Username already exist'\n    });\n  } else if (eCount === 1 && email !== semail) {\n    notify({\n      value: 'Email already exist'\n    });\n  } else {\n    let {\n      data: {\n        message,\n        success\n      }\n    } = await post('/api/edit-profile', values);\n    notify({\n      value: ObjectMssg(message),\n      done: () => success ? window.location.reload() : null\n    });\n  }\n\n  action.end('Done editing');\n};\n/**\r\n * Resend verification link\r\n */\n\nexport const resend_verification = async () => {\n  let action = new Action('.resend_vl', true, 'sec_btn_disabled');\n  action.start('Sending verification link ...');\n  wait();\n  notify({\n    value: \"\"\n  });\n  action.end('Resend verifcation link');\n};\n/**\r\n * Converts a fields object into array so we can map though \r\n * the array and follow DRY pattern.\r\n * @param {Object} fields Fields to convert into an array\r\n */\n\nexport const filedsToArray = fields => {\n  let array = [];\n  fields.forEach((index, value) => {\n    array.push({\n      index,\n      value: fields[index]\n    });\n  });\n  return array;\n};","map":{"version":3,"sources":["C:/JavascriptProjects3/instagramClone/client/src/utils/edit-profile-utils.js"],"names":["post","addTag","ObjectMssg","wait","notify","Action","addUserTags","options","value","user","dispatch","tag","editProfile","susername","semail","values","username","email","data","uCount","what","eCount","action","start","message","success","done","window","location","reload","end","resend_verification","filedsToArray","fields","array","forEach","index","push"],"mappings":"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","sourcesContent":["import {post} from 'axios'\r\nimport {addTag} from '../actions/user';\r\nimport {ObjectMssg,wait} from './utils';\r\nimport {notify} from '../utils/utilMethods/handy-notification';\r\nimport Action from './api/Action';\r\n\r\n/**\r\n * Add user tags\r\n * @param {Object} options\r\n * @param {String} options.value\r\n * @param {Number} options.user\r\n * @param {Function} options.dispatch\r\n */\r\n export const addUserTags = options => {\r\n     let {value,user,dispatch} = options;\r\n     if(value){\r\n         dispatch(addTag({\r\n             user,\r\n             tag: value\r\n         }))\r\n     } else {\r\n         notify({\r\n             value: 'Please enter a tag'\r\n         })\r\n     }\r\n }\r\n\r\n /**\r\n * Edit profile\r\n * @param {Object} options\r\n * @param {String} options.susername\r\n * @param {String} options.semail\r\n * @param {Object} options.values\r\n * @param {String} options.values.username\r\n * @param {String} options.values.email\r\n */\r\n export const editProfile = async options => {\r\n     let {susername,semail,values,values: {username,email}} = options;\r\n     let {data: uCount} = await post('/api/what-exists',{what: 'username', value: username});\r\n     let {data: eCount} = await post('/api/what-exists',{what: 'email', value: email});\r\n     let action = new Action('.edit_done');\r\n         action.start('Processing ...');\r\n     \r\n     if(!username){\r\n         notify({ value: 'Username must not be empty'});\r\n     } else if(!email){\r\n         notify({ value: 'Email must not be empty'})\r\n     } else if(uCount === 1 && username !== susername){\r\n         notify({ value: 'Username already exist'})\r\n     } else if(eCount === 1 && email !== semail){\r\n         notify({value: 'Email already exist'})\r\n     } else {\r\n         let {data: {message,success}} = await post('/api/edit-profile', values);\r\n         notify({\r\n             value: ObjectMssg(message),\r\n             done: () => (success ? window.location.reload() : null)\r\n         })\r\n     }\r\n\r\n     action.end('Done editing');\r\n }\r\n\r\n/**\r\n * Resend verification link\r\n */\r\n export const resend_verification = async () => {\r\n     let action = new Action('.resend_vl',true,'sec_btn_disabled');\r\n         action.start('Sending verification link ...');\r\n         wait();\r\n\r\n     notify({ value: \"\"});\r\n     action.end('Resend verifcation link')    \r\n }\r\n\r\n/**\r\n * Converts a fields object into array so we can map though \r\n * the array and follow DRY pattern.\r\n * @param {Object} fields Fields to convert into an array\r\n */\r\n export const filedsToArray = fields => {\r\n     let array = [];\r\n\r\n     fields.forEach((index,value) => {\r\n        array.push({\r\n            index,\r\n            value: fields[index]\r\n          })\r\n     })\r\n     return array;\r\n }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}